<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[曾经渐行远，未免心戚戚]]></title>
  <link href="http://aluenkinglee.com/atom.xml" rel="self"/>
  <link href="http://aluenkinglee.com/"/>
  <updated>2014-04-21T15:06:47+08:00</updated>
  <id>http://aluenkinglee.com/</id>
  <author>
    <name><![CDATA[Aluen King Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[a scratch of feature selection in traffic classification]]></title>
    <link href="http://aluenkinglee.com/blog/2014/04/20/a-scratch-of-feature-selection-in-traffic-classification/"/>
    <updated>2014-04-20T21:02:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/04/20/a-scratch-of-feature-selection-in-traffic-classification</id>
    <content type="html"><![CDATA[<p>特征选取在减轻识别流量监测方面起着很重要的作用。该方法可以显著提高计算流量分类的性能。但是，大部分的特征不能应用在实时在线的流量分类中（有些特征只能在获取完整个流量才能得到，比如传输的数据大小，流的传输时长等）。所以在抉择分类的时候，需要一个优化过的特征集合在更短的时间内完成流量的分类。另外一种方案就是使用新型的网络架构如SDN/OpenFlow在目前已有的特征选择方法中，Chi-squared, Fuzzy-rough and Consistency-based的特征选择方法最适合P2P流量选择（那现在的手机端流量分析怎么样？）这些算法在使用ML进行在线P2P检测时会给出较好的特征子集。
<!--more-->
特征选取是寻找一个最小特征子集，可以快速有效的识别出实例的类别。如果利用一个特征进行分类聚类的结果与不使用它的结果没有很大的差别，则称整个特征时没有分类能力的。使用这些具备分类，聚类能力的特征，在分类的准确性和计算性能上都会得到提升。[1]主要研究的是在线流量分类中的流特征问题。然后考虑精度和性能的因素，选取了3中能够应用到P2P流量中的特征选择方法。</p>

<p>[1]实现的主要方法是使用了几个特征选择算法来提出在线的流量特征，使用J48算法作为分类器。</p>

<p>特征规模大小与分类器的效率和准确率息息相关，最优的特征集合可以减少分类器的建模和检测时间，从而提升分类器的性能[5]。主流的分类器有CSF, CON, Filter-Sub, Fuzzy-rough, Symmetrical-Uncert, Chi-squared,Info Gain, Relief, Principal and Latent-semantic。作者使用的Chi-squared, Consistency and fuzzy-rough算法，相关文献可以在论文[1]中找到。</p>

<h2 id="section">在线特征提取</h2>

<p>尽管Moore提出了248中流量特征，这些特征源自于同一个流中的报头信息。实际应用中的确不能全部都用到。具体操作是对现有的特征集使用那十个特征选择方法，分别选出各自的特征子集，然后应用到SVM分类器中，判别的准则为建模时间(训练时间)和准确率。然后合并准确率最高的前3个特征集合的并集作为最优特征子集。然后在分出那些特征可以在线获取（SOF-selection of features），他们作为分类器的输入-报文的特征向量。</p>

<p>核心思想是使用监督方法对有标记的数据集进行分类时，对特征集合进行规约，减少特征集的大小。</p>

<h4 id="section-1">实验</h4>

<p><strong>信息增益</strong>：特征 $A$ 对于训练数据集$D$的信息增益 $g\left( D,A \right)$,定义为集合 $D$ 的经验熵 $H\left( D \right)$ 与特征 $A$ 在给定条件下 $D$ 
的经验条件熵c之差。</p>

<script type="math/tex; mode=display">
g\left( D,A \right) =H\left( D \right) -H\left( { D }|{ A } \right) 
</script>

<p>给定训练数据集$D$和特征$A$，经验熵$H(D)$表示对数据集$D$进行分类的不确定性，
而经验条件熵$H\left( { D }|{ A } \right)$表示在特征$A$给定条件下对数据集$D$分类的的不确定性。他们的差
就是<code>信息增益</code>。表示由于特征$A$而使得对数据集$D$的分类不确定性减少的程度。
显然，对于数据集$D$而言，信息增益依赖特征，不同的特征具有不同的信息增益，信息增益大的特征具有更强的分类能力。</p>

<p>所以算法选择特征的准则就是：对于训练数据集$D$，计算其每个特征的信息增益，并比较他们的大小，选在信息增益最大的特征。</p>

<p>设训练数据集为<script type="math/tex">\left\vert  D  \right\vert </script>表示样本大小，在我们这里就有42个实例。设有$K$个类<script type="math/tex">{C}_{k}</script>。
令<script type="math/tex">\left\vert {C}_{k}  \right\vert</script>为属于类k的个数，即<script type="math/tex">\sum_{k=1}^{K}{\left|{C}_{k} \right|}=\left|D \right|</script>
设特征A有n个不同的取值， <script type="math/tex">a_1, \ldots, a_n</script>，根据特征<script type="math/tex">A</script>的取值将<script type="math/tex">D</script>划分为n个子集，<script type="math/tex">D_1,D_2,\ldots,D_n</script>,<script type="math/tex">\left\vert D_i \right\vert</script>
为<script type="math/tex">D_i</script>的样本个数，<script type="math/tex">\sum_{i=1}^{n}\left\vert D_i \right\vert = \left\vert D \right\vert</script>.记子集<script type="math/tex">D_i</script>中属于类<script type="math/tex">C_k</script>的样本的集合为<script type="math/tex">D_ik</script>,即
<script type="math/tex">D_ik=D_i \cap C_k</script>,<script type="math/tex">|D_ik|</script>为<script type="math/tex">D_ik</script>的样本个数。于是信息增益算法如下：</p>

<p><strong>信息增益算法</strong></p>

<p>输入：训练集D和特征A</p>

<p>输出：特征A对特征集D的信息增益<script type="math/tex">g(D,A)</script></p>

<p>1.计算数据集<script type="math/tex">D</script>的经验熵<script type="math/tex">H(D)</script></p>

<script type="math/tex; mode=display">
H(D)=-\sum_{k=1}^{K}{\frac{\vert C_k \vert}{|D|}}\log_{2}{\frac{\vert C_k \vert}{|D|}}
</script>

<table>
  <tbody>
    <tr>
      <td>2.计算特征<script type="math/tex">A</script>对数据集<script type="math/tex">D</script>的经验条件熵H(D</td>
      <td>A)</td>
    </tr>
  </tbody>
</table>

<script type="math/tex; mode=display">
H(D|A)=\sum_{i=1}^{n}{\frac{|D_i|}{|D|}}H(D_i)=-\sum_{i=1}^{n}{\frac{\vert D_i \vert}{|D|}} \sum_{k=1}^{K}{\frac{\vert D_{ik} \vert}{|D_i|}}\log_{2}{\frac{\vert D_{ik} \vert}{|D_i|}}
</script>

<p>3.计算信息增益</p>

<script type="math/tex; mode=display">
g\left( D,A \right) =H\left( D \right) -H\left( { D }|{ A } \right) 
</script>

<h6 id="section-2">使用信息熵增益算法对特征进行降纬</h6>

<p>实验前</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Instances:    42
</span><span class="line">Attributes:   35
</span><span class="line">              sip
</span><span class="line">              sport
</span><span class="line">              dip
</span><span class="line">              dport
</span><span class="line">              protocal
</span><span class="line">              interval1
</span><span class="line">              interval2
</span><span class="line">              interval3
</span><span class="line">              interval4
</span><span class="line">              interval5
</span><span class="line">              interval6
</span><span class="line">              interval7
</span><span class="line">              interval8
</span><span class="line">              interval9
</span><span class="line">              packet_len1
</span><span class="line">              packet_len2
</span><span class="line">              packet_len3
</span><span class="line">              packet_len4
</span><span class="line">              packet_len5
</span><span class="line">              packet_len6
</span><span class="line">              packet_len7
</span><span class="line">              packet_len8
</span><span class="line">              packet_len9
</span><span class="line">              packet_len10
</span><span class="line">              payload_len1
</span><span class="line">              payload_len2
</span><span class="line">              payload_len3
</span><span class="line">              payload_len4
</span><span class="line">              payload_len5
</span><span class="line">              payload_len6
</span><span class="line">              payload_len7
</span><span class="line">              payload_len8
</span><span class="line">              payload_len9
</span><span class="line">              payload_len10
</span><span class="line">              cluster
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到的属性的排序是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Ranked attributes:
</span><span class="line"> 1.944968503161257472   12 interval7
</span><span class="line"> 1.79590506127720192    22 packet_len8
</span><span class="line"> 1.789000161744105216    9 interval4
</span><span class="line"> 1.485875203840541952   32 payload_len8
</span><span class="line"> 1.476115354039271936   24 packet_len10
</span><span class="line"> 1.474554148784290048   19 packet_len5
</span><span class="line"> 1.433523944277332992   11 interval6
</span><span class="line"> 1.4172094615274624     20 packet_len6
</span><span class="line"> 1.40428856745235968     6 interval1
</span><span class="line"> 1.326924790992714496   34 payload_len10
</span><span class="line"> 1.181689898847241984   18 packet_len4
</span><span class="line"> 1.105237515513706624   23 packet_len9
</span><span class="line"> 1.009802257207393664   28 payload_len4
</span><span class="line"> 1.000000000000000896   31 payload_len7
</span><span class="line"> 1.000000000000000896   30 payload_len6
</span><span class="line"> 0.993447238380203776   21 packet_len7
</span><span class="line"> 0.868563607479333888    3 dip
</span><span class="line"> 0.832352013234566144   14 interval9
</span><span class="line"> 0.829607103088203904   29 payload_len5
</span><span class="line"> 0.781988055469156096   17 packet_len3
</span><span class="line"> 0.781988055469156096   16 packet_len2
</span><span class="line"> 0.737113917996471168   10 interval5
</span><span class="line"> 0.544053730963280448    2 sport
</span><span class="line"> 0                      27 payload_len3
</span><span class="line"> 0                       5 protocal
</span><span class="line"> 0                       1 sip
</span><span class="line"> 0                       4 dport
</span><span class="line"> 0                      33 payload_len9
</span><span class="line"> 0                      25 payload_len1
</span><span class="line"> 0                      15 packet_len1
</span><span class="line"> 0                      13 interval8
</span><span class="line"> 0                       7 interval2
</span><span class="line"> 0                      26 payload_len2
</span><span class="line"> 0                       8 interval3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以对于属性payload_len3，protocal，sip，dport，payload_len9，payload_len1，payload_len2，packet_len1，interval8，interval2，interval3这十一个属性都可以去掉。
降维之后的属性集合大小为23.</p>

<p>降维之后的聚类结果</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-04-20-a-scratch-of-feature-selection-in-traffic-classification/reduction2.png?raw=true" alt="降维之后的聚类结果" title="降维之后的聚类结果" /></p>

<p>降维之前的聚类结果</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-04-20-a-scratch-of-feature-selection-in-traffic-classification/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E8%B7%9D%E7%A6%BB.png?raw=true" alt="降维之前的聚类结果" title="降维之前的聚类结果" /></p>

<p>效果非常吻合。</p>

<h6 id="pca">使用PCA对特征集规约</h6>

<p>这个使用weka的来做的，做出来之后有12个特征（都是原有特征的线性组合）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Attributes:   12
</span><span class="line">              0.333payload_len7+0.332packet_len7-0.307dip+0.295payload_len6+0.293packet_len6...
</span><span class="line">              0.399packet_len8+0.398payload_len8-0.269payload_len5-0.268packet_len5+0.261interval5...
</span><span class="line">              0.399interval4+0.309interval1-0.308packet_len10-0.274packet_len9-0.272payload_len9...
</span><span class="line">              -0.366payload_len9-0.366packet_len9-0.349packet_len5-0.347payload_len5-0.288interval1...
</span><span class="line">              -0.357interval3+0.351packet_len7+0.348payload_len7-0.324interval5+0.313interval7...
</span><span class="line">              0.454interval6-0.424interval5-0.401interval1+0.262interval9+0.256packet_len4...
</span><span class="line">              -0.402interval7-0.388payload_len6-0.387packet_len6-0.357interval8-0.26sport...
</span><span class="line">              -0.597interval9+0.443packet_len10-0.427packet_len2-0.239packet_len3-0.209packet_len6...
</span><span class="line">              0.865interval2+0.178interval3+0.168packet_len10+0.149packet_len4-0.146payload_len9...
</span><span class="line">              -0.751sport+0.346interval3+0.286dip+0.216interval7-0.178packet_len2...
</span><span class="line">              -0.434interval3+0.425interval2+0.315payload_len9+0.312packet_len9-0.311sport...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>降维之后的聚类结果</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-04-20-a-scratch-of-feature-selection-in-traffic-classification/reduction1.png?raw=true" alt="降维之后的聚类结果" title="降维之后的聚类结果" /></p>

<p>分析，由于降维特征减少太多，走势已经不太吻合。</p>

<h6 id="section-3">卡方分布提取特征算法</h6>

<p>对于这个算法，这里只给出特征选取的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">Ranked attributes:
</span><span class="line">157.0864   12 interval7
</span><span class="line">145.6184   22 packet_len8
</span><span class="line">130.1739   20 packet_len6
</span><span class="line">123.7833    6 interval1
</span><span class="line">123.0833    9 interval4
</span><span class="line">118.16     32 payload_len8
</span><span class="line">108.7528   34 payload_len10
</span><span class="line">108.5061   24 packet_len10
</span><span class="line">103.1333   18 packet_len4
</span><span class="line"> 92.3818   11 interval6
</span><span class="line"> 85.5423   23 packet_len9
</span><span class="line"> 81.0409   19 packet_len5
</span><span class="line"> 61.9733   28 payload_len4
</span><span class="line"> 42        31 payload_len7
</span><span class="line"> 42        29 payload_len5
</span><span class="line"> 42        30 payload_len6
</span><span class="line"> 42        21 packet_len7
</span><span class="line"> 39.4135   16 packet_len2
</span><span class="line"> 39.4135   17 packet_len3
</span><span class="line"> 38.4      14 interval9
</span><span class="line"> 37.9167    2 sport
</span><span class="line"> 36.9542    3 dip
</span><span class="line"> 33.9      10 interval5
</span><span class="line">  0         5 protocal
</span><span class="line">  0        33 payload_len9
</span><span class="line">  0         4 dport
</span><span class="line">  0         1 sip
</span><span class="line">  0        25 payload_len1
</span><span class="line">  0        15 packet_len1
</span><span class="line">  0        13 interval8
</span><span class="line">  0         8 interval3
</span><span class="line">  0         7 interval2
</span><span class="line">  0        26 payload_len2
</span><span class="line">  0        27 payload_len3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>被取消的特征同样是那11个特征，只是排序结果不一样了。
所以理所当然kmeans实验室一致的。
Kmeans实验和实验1一样</p>

<p>最终选取的特征集合为23个</p>

<h4 id="section-4">参考</h4>

<p>[1]. Jamil, H.A., et al., Selection of On-line Features for Peer-to-Peer Network Traffic Classification, in Recent Advances in Intelligent Informatics. 2014, Springer. p. 379-390.</p>

<p>[2]. Zhen, L. and L. Qiong, A new feature selection method for internet traffic classification using ml. Physics Procedia, 2012. 33: p. 1338-1345.</p>

<p>[3]. Moore, A.W. and D. Zuev. Internet traffic classification using bayesian analysis techniques. in ACM SIGMETRICS Performance Evaluation Review. 2005: ACM.</p>

<p>[4]. Dash, M. and P.W. Koot, Feature selection for clustering, in Encyclopedia of database systems. 2009, Springer. p. 1119-1125.</p>

<p>[5]. 统计学习方法。李航</p>

<p>[6]. Mitra, P., C.A. Murthy and S.K. Pal, Unsupervised feature selection using feature similarity. IEEE transactions on pattern analysis and machine intelligence, 2002. 24(3): p. 301-312.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“奇异”的内存覆盖]]></title>
    <link href="http://aluenkinglee.com/blog/2014/03/04/qi-yi-de-nei-cun-fu-gai/"/>
    <updated>2014-03-04T22:01:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/03/04/qi-yi-de-nei-cun-fu-gai</id>
    <content type="html"><![CDATA[<p>犯了一个愚蠢的问题，让我碰到了这么个内容错误的bug</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">*** glibc detected *** ./main: free<span class="o">()</span>: invalid next size <span class="o">(</span>fast<span class="o">)</span>: 0x0000000001dd8590 ***
</span><span class="line"><span class="o">=======</span> Backtrace: <span class="o">=========</span>
</span><span class="line">/lib/x86_64-linux-gnu/libc.so.6<span class="o">(</span>+0x76d76<span class="o">)[</span>0x7fd77419fd76<span class="o">]</span>
</span><span class="line">/lib/x86_64-linux-gnu/libc.so.6<span class="o">(</span>cfree+0x6c<span class="o">)[</span>0x7fd7741a4aac<span class="o">]</span>
</span><span class="line">/usr/lib/x86_64-linux-gnu/libpcap.so.0.8<span class="o">(</span>+0x1b470<span class="o">)[</span>0x7fd774e2e470<span class="o">]</span>
</span><span class="line">/usr/lib/x86_64-linux-gnu/libpcap.so.0.8<span class="o">(</span>pcap_loop+0x2f<span class="o">)[</span>0x7fd774e1fecf<span class="o">]</span>
</span><span class="line">./main<span class="o">[</span>0x401869<span class="o">]</span>
</span><span class="line">/lib/x86_64-linux-gnu/libc.so.6<span class="o">(</span>__libc_start_main+0xfd<span class="o">)[</span>0x7fd774147ead<span class="o">]</span>
</span><span class="line">./main<span class="o">[</span>0x401001<span class="o">]</span>
</span><span class="line"><span class="o">=======</span> Memory map: <span class="o">========</span>
</span><span class="line">00400000-00402000 r-xp 00000000 08:08 1982169                            /home/kinglee/github/stuff/cplusplus/traffic_parser/main
</span><span class="line">00602000-00603000 rw-p 00002000 08:08 1982169                            /home/kinglee/github/stuff/cplusplus/traffic_parser/main
</span><span class="line">01dc8000-01de9000 rw-p 00000000 00:00 0                                  <span class="o">[</span>heap<span class="o">]</span>
</span><span class="line">7fd770000000-7fd770021000 rw-p 00000000 00:00 0
</span><span class="line">7fd770021000-7fd774000000 ---p 00000000 00:00 0
</span><span class="line">7fd774129000-7fd7742a9000 r-xp 00000000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
</span><span class="line">7fd7742a9000-7fd7744a9000 ---p 00180000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
</span><span class="line">7fd7744a9000-7fd7744ad000 r--p 00180000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
</span><span class="line">7fd7744ad000-7fd7744ae000 rw-p 00184000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
</span><span class="line">7fd7744ae000-7fd7744b3000 rw-p 00000000 00:00 0
</span><span class="line">7fd7744b3000-7fd7744c8000 r-xp 00000000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
</span><span class="line">7fd7744c8000-7fd7746c8000 ---p 00015000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
</span><span class="line">7fd7746c8000-7fd7746c9000 rw-p 00015000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
</span><span class="line">7fd7746c9000-7fd77474a000 r-xp 00000000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
</span><span class="line">7fd77474a000-7fd774949000 ---p 00081000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
</span><span class="line">7fd774949000-7fd77494a000 r--p 00080000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
</span><span class="line">7fd77494a000-7fd77494b000 rw-p 00081000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
</span><span class="line">7fd77494b000-7fd774a33000 r-xp 00000000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
</span><span class="line">7fd774a33000-7fd774c33000 ---p 000e8000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
</span><span class="line">7fd774c33000-7fd774c3b000 r--p 000e8000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
</span><span class="line">7fd774c3b000-7fd774c3d000 rw-p 000f0000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
</span><span class="line">7fd774c3d000-7fd774c52000 rw-p 00000000 00:00 0
</span><span class="line">7fd774c52000-7fd774c72000 r-xp 00000000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
</span><span class="line">7fd774e0e000-7fd774e13000 rw-p 00000000 00:00 0
</span><span class="line">7fd774e13000-7fd774e4b000 r-xp 00000000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
</span><span class="line">7fd774e4b000-7fd774e4d000 r--p 00037000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
</span><span class="line">7fd774e4d000-7fd774e4e000 rw-p 00039000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
</span><span class="line">7fd774e4e000-7fd774e4f000 rw-p 00000000 00:00 0
</span><span class="line">7fd774e6d000-7fd774e71000 rw-p 00000000 00:00 0
</span><span class="line">7fd774e71000-7fd774e72000 r--p 0001f000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
</span><span class="line">7fd774e72000-7fd774e73000 rw-p 00020000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
</span><span class="line">7fd774e73000-7fd774e74000 rw-p 00000000 00:00 0
</span><span class="line">7fff1591a000-7fff1593b000 rw-p 00000000 00:00 0                          <span class="o">[</span>stack<span class="o">]</span>
</span><span class="line">7fff159ff000-7fff15a00000 r-xp 00000000 00:00 0                          <span class="o">[</span>vdso<span class="o">]</span>
</span><span class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  <span class="o">[</span>vsyscall<span class="o">]</span>
</span><span class="line">已放弃
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于这个问题，当时表示怎么会出现内存错误？我指针根本没有指错啊！那块内存也没有回收阿！！原来的程序比较大，所以我就抽象写了个简单的，慢慢找。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class="line"><span class="cp">#include &lt;vector&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="k">typedef</span> <span class="k">class</span> <span class="nc">packet</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">packet</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">p</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">	<span class="c1">//注意这里，开始我写成了这样，一开始写顺了...</span>
</span><span class="line">	<span class="c1">//我本意是想申请一个长度为l的连续内存区域。</span>
</span><span class="line">	<span class="c1">//结果本意成为了申请了一个单位的内存，并给它赋值！！</span>
</span><span class="line">        <span class="n">data</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
</span><span class="line">        <span class="c1">//应该写成这样</span>
</span><span class="line">        <span class="c1">//data=new char[l];</span>
</span><span class="line">        <span class="n">copy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">l</span><span class="p">,</span><span class="n">data</span><span class="p">);</span>
</span><span class="line">        <span class="n">len</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">packet</span><span class="p">(</span><span class="k">const</span> <span class="n">packet</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">len</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">len</span><span class="p">;</span>
</span><span class="line">        <span class="n">data</span><span class="o">=</span><span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
</span><span class="line">        <span class="n">copy</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">data</span><span class="o">+</span><span class="n">len</span><span class="p">,</span><span class="n">data</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">packet</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">packet</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">len</span><span class="p">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">];</span>
</span><span class="line">        <span class="n">copy</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">data</span><span class="o">+</span><span class="n">len</span><span class="p">,</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">~</span><span class="n">packet</span><span class="p">(){</span><span class="k">delete</span><span class="p">[]</span> <span class="n">data</span><span class="p">;}</span>
</span><span class="line">    <span class="kt">char</span><span class="o">*</span> <span class="n">get_data</span><span class="p">(){</span><span class="k">return</span> <span class="n">data</span><span class="p">;}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span><span class="n">packet</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">packet</span><span class="o">&gt;</span> <span class="n">stream</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="s">&quot;hello world.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">packet</span> <span class="n">p</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">t</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">get_data</span><span class="p">(</span> <span class="p">)</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">stream</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">stream</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">get_data</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译运行就会出错。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">g</span><span class="o">++</span> <span class="n">test</span><span class="p">.</span><span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">main</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以，上述的语句是没有申请够足够的内存(只申请了一个，却按照那个长度来copy！！当然会出现数据覆盖的错误，这个属于语言错误)，所以会造成之后的内存覆盖，导致出错。有意思的是在windows平台上，我试过，是不会提示你出错的。
不过确实可以看到运行过程中不合理的地方。比如数据被覆盖了overlapping!（实验平台debian 7 ，g++ (Debian 4.7.2-5) 4.7.2
windows是win7 + mingw）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="o">***</span> <span class="n">glibc</span> <span class="n">detected</span> <span class="o">***</span> <span class="p">.</span><span class="o">/</span><span class="nl">main:</span> <span class="kt">double</span> <span class="n">free</span> <span class="n">or</span> <span class="n">corruption</span> <span class="p">(</span><span class="n">fasttop</span><span class="p">)</span><span class="o">:</span> <span class="mh">0x0000000000e55010</span> <span class="o">***</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外一点，在实际使用过程中，还是尽量不要混合使用malloc 和delete/delete[]</p>

<ul>
  <li>
    <p>使用malloc分配的内存尽量使用free释放掉</p>
  </li>
  <li>
    <p>使用new分配的内存，看情况，若是对象类型本身就是数组类型，使用delete[],否则使用delete释放掉内存</p>
  </li>
  <li>
    <p>使用new[]分配内存的，必须使用delete[] 来释放掉内存。否则只是释放掉了内存区域的第一个从而造成内存泄漏。</p>
  </li>
</ul>

<blockquote>
  <blockquote>
    <p>参考</p>
  </blockquote>
</blockquote>

<ul>
  <li>
    <p><a href="http://stackoverflow.com/questions/18389313/glibc-detected-main-free-invalid-next-size-fast">’** glibc detected *** ./main: free(): invalid next size (fast):’</a></p>
  </li>
  <li>
    <p><a href="http://www.cplusplus.com/reference/cstring/memcpy/?kw=memcpy">‘好好使用memcpy’</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解TCP中的序列号和确认号]]></title>
    <link href="http://aluenkinglee.com/blog/2014/02/26/li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/"/>
    <updated>2014-02-26T22:34:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/02/26/li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao</id>
    <content type="html"><![CDATA[<p>之所以写这么一篇文章是因为被wireshark的序列号搞晕了，我不知道你们是否这样，当你读这篇article时，肯定你已经熟悉了TCP那个三次握手，
或者是SYN,SYN|ACK,ACK. 而我要做的也就是这个，提取一个流的前N个packets，针对目前的需求，只需要在传输层截取UDP和TCP的前多少个流即可。
所以我得分析网络层的这些协议底层到底是怎么回事，在结合libpcap完成流的提取任务。</p>

<p>相对来说TCP还是个复杂的协议，而且值得清楚的认识以下。那么结合wireshark和代码来认识下TCP里面的东西。</p>

<!--more-->

<p><a href="https://github.com/aluenkinglee/stuff/blob/master/cplusplus/traffic_parser/b.pcap?raw=true" title="pcap文件">这里</a>是个已经准备好的pcap文件，本文结合这个文件对此进行描述。</p>

<p>这个文件分析的是微信在单一环境中的网络行为，所以比较简单。打开这个文件，找到开始的几个右键单击选择<code>Follow TCP Stream</code>，或者在filter那里输入<code>tcp.stream eq 1</code>可以看到这里。</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-02-26-li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/tcp1.png?raw=true" alt="Follow TCP Stream" title="Follow TCP Stream" /></p>

<h4 id="section">三次握手</h4>

<p>TCP利用了8个标志位，在头部位置，以此来控制链接的状态，对我们最有用的就是SYN，ACK，FIN了。</p>

<ul>
  <li>SYN - (Synchronize) Initiates a connection</li>
  <li>FIN - (Final) Cleanly terminates a connection</li>
  <li>ACK - Acknowledges received data</li>
</ul>

<p>下面将会看到，一个packet包含了多个flag set。</p>

<h6 id="flagssyn10">对于这个流的第一个，注意Flags里面出了SYN位是1之外，其它都是0。</h6>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-02-26-li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/tcp2.png?raw=true" alt="第一次握手" title="第一次握手" /></p>

<h6 id="synack">接下来在看第二个，注意它有两个标志位被设置为1，分别是SYN和ACK。</h6>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-02-26-li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/tcp3.png?raw=true" alt="第二次握手" title="第二次握手" /></p>

<h6 id="packetack">对于第三个packet，就只有ACK设置了。</h6>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-02-26-li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/tcp4.png?raw=true" alt="第三次握手" title="第三次握手" /></p>

<p>这就是最初的TCP三次握手。</p>

<h4 id="seqack">序列号和应答号（SEQ和ACK）</h4>

<p>假设客户端为A，服务器为B，双方都为护着一个32bit的序列号，用来追踪传输了多少数据。。这个号包括了之前所传输的负载的
大小，由另一端的应答号来应答“你传的数据我都收到了。。”</p>

<p>当一个机器开始初始TCP序列号时，它是随机的！！不然会出现序列号攻击。。（我忘记了，在用那个wireshark后成功被它的相对序列号迷惑了==）,是一个0～ $2^{32}-1$的数。相对序列号是给人看的，所以像wireshark之辈使用它是为了人们方便阅读理解的。
（选择不启用相对序列号：选择<code>Edit &gt; Preferences... </code>不启用那个<code>Relative sequence numbers and window scaling </code>就可以了）</p>

<p>接下来让我们结合下图来看这个流的行为。在<code>Statistics &gt; Flow Graph...</code>选择<code>TCP flow</code>。</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-02-26-li-jie-tcpzhong-de-xu-lie-hao-he-que-ren-hao/tcp5.png?raw=true" alt="流图" title="流图" /></p>

<p>这张图很容易理解就不说了。使用这张流图可以很方便的帮助我们理解他们是怎么工作的。</p>

<h6 id="packet-1">packet #1</h6>

<p>A向B发了一个请求，我们可以在frame的tcp中分析出来，SYN=1而ACK=0，这意味这是一个流的起始包。这里使用的是相对序列号，所以为0.</p>

<h6 id="packet-2">packet #2</h6>

<p>B收到了响应，恩，因为这是会话的开始，所以B这边也生成了一个随机的序列号，只不过在这里也显示为0了。SYN置为1。另外ACK也置为1，表明收到了A的响应。
(注意！虽然A没有发送任何负载payload，B仍然把ACK置为1，是因为收到的SYN或者FIN触发了这个增1行为。这儿不会涉及到任何负载长度的计算，因为带有这样信号的包不会携带负载的。)</p>

<h6 id="packet-3">packet #3</h6>

<p>和#2一样，A回应了B的响应（SEQ=0，ACK=1）所以ACK为1.自己的SEQ因为收到的包中有SYN所以变为1。此时，双方的SEQ都是1，这种现象在所有TCP开始建立连接时候都是一样的。</p>

<h6 id="packet-4">packet #4</h6>

<p>A这个包此时带有负载，这里的SEQ是1，因为上个包（#3）没有传输任何数据，ACK也是1，因为A没有传输任何数据。注意！packet的长度是341，但是我们计算的是传输层的数据长度–负载的长度，所以是ACK — LEN = LEN（#4）-LEN（#3） = 341 - 66 = 275。</p>

<h6 id="packet-5">packet #5</h6>

<p>这个包是B（#5）对A（#4）发送数据的响应，此时B的ACK加上负载的长度是275变为276，表示我B收到了你A传输的数据payload（#4）. B此时的SEQ仍为1.</p>

<h6 id="packet-6">packet #6</h6>

<p>这个包是B对A放送的HTTP响应，因为之前它（B）所有的包都没有负载，所以SEQ仍然为1，而ACK还是276.负载长度为627.</p>

<h6 id="packet-7">packet #7</h6>

<p>好吧，这个例子有点特殊，到这里为止B的数据就发送完了。。。所以FIN置为1，表明你（A）要得我（B）都给完了，没我的事儿了，SEQ加上我发送的数据长度为628，你那边确认之后应该和我一样才对。ACK还是之前你给我发送的那些数据，还是这些276.</p>

<h6 id="packet-8">packet #8</h6>

<p>A:收到了所有的数据，我先确认给你我数据我收到了，ACK加上627变为628。我之前发送的数据截止到目前是276，没错，我们对上了。</p>

<h6 id="packet-9">packet #9</h6>

<p>A:既然我都要到了，那么我们就分手吧~~ 同意，FIN置为1，因为从B收到了带有FIN的报文（#7），所以ACK+1，变为629。因为上个数据包#8 没有发送任何数据，所以这里的SEQ不变,</p>

<h6 id="packet-10">packet #10</h6>

<p>因为#9带有FIN，所以SEQ自增1.ACK不变。</p>

<p>关于代码，请看下篇。</p>

<h2 id="section-1">参考</h2>

<ol>
  <li>
    <p><a href="http://stackoverflow.com/questions/2672734/tcp-sequence-number-question">TCP sequence number question</a></p>
  </li>
  <li>
    <p><a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol</a></p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++的hashtable那些事]]></title>
    <link href="http://aluenkinglee.com/blog/2014/02/24/c-plus-plus-de-hashtablena-xie-shi/"/>
    <updated>2014-02-24T05:29:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/02/24/c-plus-plus-de-hashtablena-xie-shi</id>
    <content type="html"><![CDATA[<p>对于想知道hashtable原理的的人来说，多少对基本的数据结构和算法都有些了解，所以不再细说。</p>

<p>平常我们所说的一些容器来说，比如vector，list，stack之类，他们中的元素都是可以排序的，可以归为序列式容器，基于连续内存的vector可以实现随机存储，但是搜索的复杂度是O（n），list也是如此。
在关联式容器中，每个数据有一个键值和一个实值。元素插入到关联式容器中，容器内部结构根据其键值依据某个特定的规则将这个元素放置于适当的位置，从而实现插入和搜索是对数平均时间（基于红黑树），甚至是尽可能的是常数级别（就是这里说的散列表），其效率依赖于数据的特性和规则的设计。关联式的容器没有所谓的头尾，不会有begin(),end(),push_back()等这样的行为。</p>

<p>数组是个很好的内建数据结构，你甚至可以把数组看成一个最简单的hash表，index是种键值，而内容则是value。是不是很好，常数级寻址。但是也有问题，通常我们面对的键值不仅仅是简单的无符号的整数之流，还有很多的string啊，复杂的类对象啊，而这些问题就是hash函数所要处理的问题。hash函数把这个对象映射到[0-表的长度-1]之间。但是，不能够保证每个元素的键值与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了“冲突”，换句话说，就是把不同的元素分在了相同的“类”之中。 总的来说，“直接定址”与“解决冲突”是哈希表的两大特点。首先，为什么会出现冲突？基于这种想法设计出来的结构无疑是一种空间换时间的典范，尽管现在硬件越来越牛逼，但并不意味着可以随便挥霍，矛盾就出现在空间的数据往往小于我们要处理的数据规模，所以我们不可能设计出一种一一对应的函数来。而解决冲突就是hash第二个要解决的问题。</p>

<p>对于冲突的解决，往往有线性探测和二测探测以及开链法（类似list），前两种往往在数据规模小的情况下，即空间浪费的时候效率较高，这也意味着空间利用率不是很理想，而开链法，器负载系数大于1，就是索引的数组被极大利用了。
<!--more--></p>

<p>所以在hashtable中，把一个元素（对象）插入到其中，分为以下的过程：</p>

<p>1.得到元素的键值Key。</p>

<p>2.调用处理该键型KeyType的hash函数(有时候需要用户自己编写)得到hash值（即下标）。</p>

<p>3.把该元素存放到对应该下标的桶内。</p>

<p>查找，取值的过程:</p>

<p>1.得到元素的键值Key。</p>

<p>2.调用处理该键型KeyType的hash函数得到hash值（即下标）。</p>

<p>3.比较桶的内部元素是否与key相等（编写equal_to函数，基本类型意外用户根据需求编写），若都不相等，则没有找到。</p>

<p>4.取出相等的记录的value。</p>

<p>综上所述，实现一个hashtable必须注意hash函数 和 比较函数的接口提供。</p>

<h5 id="hashtable">hashtable迭代器的设计</h5>

<p>首先明确我们的需求，定位有hash函数搞定，而找到该桶之后，只是需要顺着桶往下找就够了，所以迭代器是个前向迭代器，对应的接口有实值，键值，hash仿函数，提取仿函数，等于仿函数，还有空间配置器等。其他编写仿照一般的迭代器设计即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Value</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Key</span><span class="p">,</span>
</span><span class="line">         <span class="k">class</span> <span class="nc">HashFcn</span><span class="p">,</span> <span class="k">class</span> <span class="nc">ExtractKey</span><span class="p">,</span>
</span><span class="line">         <span class="k">class</span> <span class="nc">EqualKey</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Alloc</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">__hashtable_iterator</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">hashtable</span><span class="o">&lt;</span><span class="n">Value</span><span class="p">,</span> <span class="n">Key</span><span class="p">,</span> <span class="n">HashFcn</span><span class="p">,</span> <span class="n">ExtractKey</span><span class="p">,</span> <span class="n">EqualKey</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;</span> <span class="n">HashTable</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">__hashtable_iterator</span><span class="o">&lt;</span><span class="n">Value</span><span class="p">,</span> <span class="n">Key</span><span class="p">,</span>
</span><span class="line">            <span class="n">HashFcn</span><span class="p">,</span> <span class="n">ExtractKey</span><span class="p">,</span>
</span><span class="line">            <span class="n">EqualKey</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;</span>
</span><span class="line">            <span class="n">iterator</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">__hashtable_iterator</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">Value</span><span class="p">,</span> <span class="n">Key</span><span class="p">,</span>
</span><span class="line">            <span class="n">HashFcn</span><span class="p">,</span> <span class="n">ExtractKey</span><span class="p">,</span>
</span><span class="line">            <span class="n">EqualKey</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;</span>
</span><span class="line">            <span class="n">const_iterator</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">typedef</span> <span class="n">__hashtable_nodes</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//因为是前向移动，没有后退操作--</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">forward_iterator_tag</span>    <span class="n">iterator_categor</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">Value</span>                   <span class="n">value_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">ptrdiff_t</span>               <span class="n">difference_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">size_t</span>                  <span class="n">size_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">Value</span><span class="o">*</span>                  <span class="n">pointer</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">Value</span><span class="o">&amp;</span>                  <span class="n">reference</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">node</span><span class="o">*</span> <span class="n">cur</span><span class="p">;</span>
</span><span class="line">    <span class="n">HashTable</span><span class="o">*</span> <span class="n">ht</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//constructor</span>
</span><span class="line">    <span class="n">__hashtable_iterator</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="n">HashTable</span><span class="o">*</span> <span class="n">tab</span><span class="p">)</span> <span class="o">:</span> <span class="n">cur</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">ht</span><span class="p">(</span><span class="n">tab</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">    <span class="n">__hashtable_iterator</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="n">reference</span> <span class="k">operator</span><span class="o">*</span><span class="p">()</span>  <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">pointer</span>   <span class="k">operator</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">&amp;</span><span class="p">(</span><span class="k">operator</span><span class="o">*</span><span class="p">());</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">iterator</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">++</span><span class="p">();</span>
</span><span class="line">    <span class="n">iterator</span>  <span class="k">operator</span><span class="o">++</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line">    <span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">iterator</span><span class="o">&amp;</span> <span class="n">it</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">it</span><span class="p">.</span><span class="n">cur</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kt">bool</span> <span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="k">const</span> <span class="n">iterator</span><span class="o">&amp;</span> <span class="n">it</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cur</span> <span class="o">!=</span> <span class="n">it</span><span class="p">.</span><span class="n">cur</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>详情请看<a href="https://github.com/aluenkinglee/stuff/blob/master/cplusplus/stl/hashtable#L127" title="__hashtable_iterator">__hashtable_iterator</a></p>

<h5 id="hashtable-1">hashtable的数据结构</h5>

<p>由于采用开链的冲突解决方法，由此看来只需要一个vector代替桶，链表来装载桶内的元素即可。</p>

<p>需要注意的是hash函数，提取函数，等于函数的成员。另外需要buckets，还有元素数目的成员，有了这些基本就够了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">//hashtable的数据结构</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Value</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Key</span><span class="p">,</span>
</span><span class="line">         <span class="k">class</span> <span class="nc">HashFcn</span><span class="p">,</span> <span class="k">class</span> <span class="nc">ExtractKey</span><span class="p">,</span>
</span><span class="line">         <span class="k">class</span> <span class="nc">EqualKey</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Alloc</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">hashtable</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">Value</span> <span class="n">value_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">value_type</span><span class="o">*</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="k">const</span> <span class="n">pointer</span> <span class="n">const_pointer</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">reference</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="k">const</span> <span class="n">reference</span> <span class="n">const_reference</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">Key</span> <span class="n">key_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">HashFcn</span> <span class="n">hasher</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">EqualKey</span> <span class="n">key_equal</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">size_t</span> <span class="n">size_type</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">__hashtable_iterator</span><span class="o">&lt;</span><span class="n">Value</span><span class="p">,</span> <span class="n">Key</span><span class="p">,</span> <span class="n">HashFcn</span><span class="p">,</span> <span class="n">ExtractKey</span><span class="p">,</span> <span class="n">EqualKey</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;</span> <span class="n">iterator</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">__hashtable_iterator</span><span class="o">&lt;</span><span class="n">Value</span><span class="p">,</span> <span class="n">Key</span><span class="p">,</span> <span class="n">HashFcn</span><span class="p">,</span> <span class="n">ExtractKey</span><span class="p">,</span> <span class="n">EqualKey</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">const_iterator</span><span class="p">;</span>
</span><span class="line"><span class="c1">//constructor</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">hashtable</span><span class="p">(</span><span class="n">size_type</span> <span class="n">n</span><span class="p">,</span>
</span><span class="line">              <span class="k">const</span> <span class="n">HashFcn</span> <span class="o">&amp;</span><span class="n">hf</span><span class="p">,</span>
</span><span class="line">              <span class="k">const</span> <span class="n">EqualKey</span> <span class="o">&amp;</span><span class="n">eql</span><span class="p">,</span>
</span><span class="line">              <span class="k">const</span> <span class="n">ExtractKey</span> <span class="o">&amp;</span><span class="n">ext</span><span class="p">)</span>
</span><span class="line">        <span class="o">:</span><span class="n">hash</span><span class="p">(</span><span class="n">hf</span><span class="p">),</span><span class="n">equals</span><span class="p">(</span><span class="n">eql</span><span class="p">),</span><span class="n">get_key</span><span class="p">(</span><span class="n">ext</span><span class="p">),</span><span class="n">num_elements</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">initialize_buckets</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">hashtable</span><span class="p">(</span><span class="n">size_type</span> <span class="n">n</span><span class="p">,</span>
</span><span class="line">              <span class="k">const</span> <span class="n">HashFcn</span> <span class="o">&amp;</span><span class="n">hf</span><span class="p">,</span>
</span><span class="line">              <span class="k">const</span> <span class="n">EqualKey</span> <span class="o">&amp;</span><span class="n">eql</span><span class="p">)</span>
</span><span class="line">        <span class="o">:</span><span class="n">hash</span><span class="p">(</span><span class="n">hf</span><span class="p">),</span><span class="n">equals</span><span class="p">(</span><span class="n">eql</span><span class="p">),</span><span class="n">get_key</span><span class="p">(</span><span class="n">ExtractKey</span><span class="p">()),</span><span class="n">num_elements</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">initialize_buckets</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">hashtable</span><span class="p">(</span><span class="k">const</span> <span class="n">hashtable</span> <span class="o">&amp;</span><span class="n">ht</span><span class="p">)</span>
</span><span class="line">        <span class="o">:</span><span class="n">hash</span><span class="p">(</span><span class="n">ht</span><span class="p">.</span><span class="n">hash</span><span class="p">),</span><span class="n">equals</span><span class="p">(</span><span class="n">ht</span><span class="p">.</span><span class="n">equals</span><span class="p">),</span><span class="n">get_key</span><span class="p">(</span><span class="n">ht</span><span class="p">.</span><span class="n">get_key</span><span class="p">),</span><span class="n">num_elements</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">copy_from</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ht</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">~</span><span class="n">hashtable</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">clear</span><span class="p">();</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">hashtable</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">hashtable</span> <span class="o">&amp;</span><span class="n">ht</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ht</span> <span class="o">!=</span> <span class="k">this</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">clear</span><span class="p">();</span>
</span><span class="line">            <span class="n">hash</span> <span class="o">=</span> <span class="n">ht</span><span class="p">.</span><span class="n">hash</span><span class="p">;</span>
</span><span class="line">            <span class="n">equals</span> <span class="o">=</span> <span class="n">ht</span><span class="p">.</span><span class="n">equals</span><span class="p">;</span>
</span><span class="line">            <span class="n">get_key</span> <span class="o">=</span> <span class="n">ht</span><span class="p">.</span><span class="n">get_key</span><span class="p">;</span>
</span><span class="line">            <span class="n">copy_from</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ht</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="n">hasher</span> <span class="n">hash</span><span class="p">;</span>
</span><span class="line">    <span class="n">key_equal</span> <span class="n">equals</span><span class="p">;</span>
</span><span class="line">    <span class="n">ExtractKey</span> <span class="n">get_key</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">typedef</span> <span class="n">__hashtable_nodes</span><span class="o">&lt;</span><span class="n">Value</span><span class="o">&gt;</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">    <span class="k">typedef</span> <span class="n">simple_alloc</span><span class="o">&lt;</span><span class="n">node</span><span class="p">,</span> <span class="n">Alloc</span><span class="o">&gt;</span> <span class="n">node_allocator</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//std::vector&lt;node*, Alloc&gt; buckets;</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">*&gt;</span> <span class="n">buckets</span><span class="p">;</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">num_elements</span><span class="p">;</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">*&gt;</span> <span class="n">getBuckets</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">buckets</span><span class="p">;}</span>
</span><span class="line">    <span class="c1">//返回bucket vector大小</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">bucket_count</span><span class="p">()</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">buckets</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//返回bucket vector可能的最大值</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">max_bucket_count</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">__stl_prime_list</span><span class="p">[</span><span class="n">__stl_num_primes</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//返回元素个数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">size</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">num_elements</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//找到起始节点</span>
</span><span class="line">    <span class="n">iterator</span> <span class="n">begin</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">size_type</span> <span class="n">bucketIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="n">node</span><span class="o">*</span> <span class="n">first</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">first</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">bucketIndex</span><span class="p">];</span>
</span><span class="line">                <span class="o">!</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">bucketIndex</span> <span class="o">&lt;</span> <span class="n">buckets</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class="line">                <span class="n">first</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">bucketIndex</span><span class="p">])</span> <span class="p">{}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">iterator</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//插入元素，不允许重复</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">iterator</span><span class="p">,</span> <span class="kt">bool</span><span class="o">&gt;</span> <span class="n">insert_unique</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">resize</span><span class="p">(</span><span class="n">num_elements</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">insert_unique_noresize</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//插入元素，允许重复</span>
</span><span class="line">    <span class="n">iterator</span> <span class="n">insert_equal</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">resize</span><span class="p">(</span><span class="n">num_elements</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">insert_equal_noresize</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//查找某一键值的节点</span>
</span><span class="line">    <span class="n">iterator</span> <span class="n">find</span><span class="p">(</span><span class="k">const</span> <span class="n">Key</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">size_type</span> <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class="line">        <span class="n">node</span><span class="o">*</span> <span class="n">first</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span> <span class="n">first</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">bucketIndex</span><span class="p">];</span>
</span><span class="line">                <span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">equals</span><span class="p">(</span><span class="n">get_key</span><span class="p">(</span><span class="n">first</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">),</span> <span class="n">key</span><span class="p">);</span>
</span><span class="line">                <span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">iterator</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//判断某一值出现的次数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">count</span><span class="p">(</span><span class="k">const</span> <span class="n">Key</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="n">size_type</span> <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class="line">        <span class="n">size_type</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="n">node</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">bucketIndex</span><span class="p">];</span>
</span><span class="line">                <span class="n">cur</span><span class="p">;</span>
</span><span class="line">                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">equals</span><span class="p">(</span><span class="n">get_key</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">),</span> <span class="n">key</span><span class="p">))</span>
</span><span class="line">                <span class="o">++</span><span class="n">result</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//判断元素落在哪个bucket</span>
</span><span class="line">    <span class="c1">//提供两个版本</span>
</span><span class="line">    <span class="c1">//版本一：只接受实值</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">bkt_num</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="n">get_key</span><span class="p">(</span><span class="n">obj</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//版本二：接受实值和buckets个数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">bkt_num</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">,</span><span class="n">size_type</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="n">get_key</span><span class="p">(</span><span class="n">obj</span><span class="p">),</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//返回在index处的节点个数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">elems_in_bucket</span><span class="p">(</span><span class="n">size_type</span> <span class="n">bucketIndex</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">size_type</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="n">node</span><span class="o">*</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">bucketIndex</span><span class="p">];</span>
</span><span class="line">        <span class="k">while</span><span class="p">(</span><span class="n">tempNode</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="n">tempNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//整体删除</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">clear</span><span class="p">();</span>
</span><span class="line">    <span class="c1">//复制hash表</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">copy_from</span><span class="p">(</span><span class="k">const</span> <span class="n">hashtable</span><span class="o">&amp;</span> <span class="n">ht</span><span class="p">);</span>
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="c1">//初始化buckets vector</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">initialize_buckets</span><span class="p">(</span><span class="n">size_type</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="n">size_type</span> <span class="n">n_buckets</span> <span class="o">=</span> <span class="n">next_size</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">        <span class="n">buckets</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">n_buckets</span><span class="p">);</span>
</span><span class="line">        <span class="n">buckets</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">buckets</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">n_buckets</span><span class="p">,</span> <span class="p">(</span><span class="n">node</span><span class="o">*</span><span class="p">)</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="n">num_elements</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//节点配置和释放函数</span>
</span><span class="line">    <span class="n">node</span><span class="o">*</span> <span class="n">new_node</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//node *tempNode = node_allocator::allocate();</span>
</span><span class="line">        <span class="n">node</span><span class="o">*</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">;</span>
</span><span class="line">        <span class="n">tempNode</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">        <span class="k">try</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">construct</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tempNode</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">catch</span> <span class="p">(...)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">//node_allocator::deallocate(tempNode);</span>
</span><span class="line">            <span class="k">delete</span> <span class="n">tempNode</span><span class="p">;</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">tempNode</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">delete_node</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span><span class="line">        <span class="k">delete</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//返回最接近n并大于等于n的质数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">next_size</span><span class="p">(</span><span class="n">size_type</span> <span class="n">n</span><span class="p">)</span><span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">__get_next_prime</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//版本一：只接受键值</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="k">const</span> <span class="n">Key</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">buckets</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//版本二：接受键值和buckets个数</span>
</span><span class="line">    <span class="n">size_type</span> <span class="n">bkt_num_key</span><span class="p">(</span><span class="k">const</span> <span class="n">Key</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">,</span><span class="n">size_type</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//判断是否需要扩充buckets vector，如有需要则进行扩充</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">resize</span><span class="p">(</span><span class="n">size_type</span> <span class="n">num_elements_hint</span><span class="p">);</span>
</span><span class="line">    <span class="c1">//在不需要重新分配bucket vector的情况下插入元素，元素不允许重复</span>
</span><span class="line">    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">iterator</span><span class="p">,</span> <span class="kt">bool</span><span class="o">&gt;</span> <span class="n">insert_unique_noresize</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">    <span class="c1">//在不需要重新分配bucket vector的情况下插入元素，元素不允许重复</span>
</span><span class="line">    <span class="n">iterator</span> <span class="n">insert_equal_noresize</span><span class="p">(</span><span class="k">const</span> <span class="n">Value</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至于更多的请看代码（由于是简易实现的，配置器那块并没有使用stl的配置器，简单写了下）<a href="https://github.com/aluenkinglee/stuff/blob/master/cplusplus/stl/hashtable#L127" title="hashtable">hashtable</a></p>

<p>基于hashtable可以实现hash_set,hash_map,hash_multiset,hash_multimap,是这些容器的底层实现，而map,set,multiset,multimap则是基于rb-tree实现的，这是区别之一。</p>

<p>另外使用基于hashtable的时候需要提供hash仿函数，提取仿函数，等于仿函数这些参数。而基于rb-tree实现的需要比较函数即可。</p>

<p>平常时间根据查找速度, 数据量, 内存使用三个因素权衡，是否适合使用hashtable。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning :linear regression]]></title>
    <link href="http://aluenkinglee.com/blog/2014/01/05/machine-learning-linear-regression/"/>
    <updated>2014-01-05T12:00:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/01/05/machine-learning-linear-regression</id>
    <content type="html"><![CDATA[<p>机器学习中，总体来说是分为两类问题：</p>

<p>1.有监督的学习方法
2.无监督的学习方法</p>

<p>其他是这两者的综合，比如说半监督学习方法，强化学习（这个还未接触过）。</p>

<p>本文呢，先从有监督的学习方法开始讲起，主要是记载学习过程中个人认为最重要的地方。</p>

<p>对于监督学习中的两类问题，或者说三类吧，分别是：回归问题，分类问题和标注问题（tagging）。后面这个很有意思，不过在这里现说一下回归和分类的区别，假如我们要
做一个连续变量的预测，比如说房价的预测，或者明日气温的预测，都是属于回归问题；而对于离散变量的预测，比如判断一个病人是否得了癌症，良性还是恶心，则是一个明显的分
类问题。</p>

<p>接下来的文章，大概是对Andrew Ng视频的一个简单的总结，会结合变成实例（octave和C++）来插叙。
<!--more--></p>

<h3 id="section">线性回归</h3>

<p>好吧，先从一个简单的例子讲起，假设我们要为一个房子售价做个数学模型，价格和什么有关系？当然因素很多，比如房间的大小，离商业区的距离，嗯，房子几坪，奥，看起来不是
个简单事儿～，那好吧，遵循我们先从最简单做起的原则，现假设相同尺寸的房子价格和城市人口多少有关系，其他的先抛到一边去，我喜欢做甩手掌柜==
，你看这很合理！北京上海的房子价格能和三四线城市的比么=。=</p>

<p>那么好，我们会看到下面这个图！图先不上！！！假设你装了octave，并执行ex1的话就会看到它的！！</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f1.png?raw=true" alt="价格-人口关系图" title="价格-人口关系图" /></p>

<p>在那之前，先让我们约定几个问题，恩恩：</p>

<h5 id="section-1">注释</h5>
<ul>
  <li>$m$ ：是训练实例的个数</li>
  <li>$x$ ：是输入的特征向量,很有可能是这样子：$x=(x_1,…,x_k)$</li>
  <li>$y$ ：是输出结果</li>
  <li>$(x,y)$ ：是一个训练实例</li>
  <li>$(x^{(i)},y^{(i)})$ ：表示第i个训练样例</li>
</ul>

<p>好了，让我们接着开始吧。那我们应该如何表示我们的假设（hypothesis）呢？既然只有一个变量，这样表示好了：</p>

<script type="math/tex; mode=display">
h_\theta(x) = \theta_0 + \theta_1x_1 ， \Theta={ (\theta_0,\theta_1) }
</script>

<p>那应该如何选择参数$\theta$呢？机器学习不就是干这活的么=。=</p>

<p>直观的感受就是：“嘿，干嘛不用LMS最小二乘法？无脑流，简单又实惠！统计课上的入门案例。。”就他了。。。</p>

<p>所以，总结如下：</p>

<p>假设：</p>

<script type="math/tex; mode=display">
h_\theta(x) = \theta_0 x_0 + \theta_1 x_1 ， 
\Theta = \left( \begin{array}{c}
        \theta_0 \\
        \theta_1
        \end{array} \right), 
x = (x_0,x_1),
x_0 \equiv 1 \\
h_\theta(x) = x \cdot \Theta
</script>

<p>费用函数：</p>

<script type="math/tex; mode=display">
J{(\Theta)}=\frac{1}{2m} \sum\limits_{i=1}^m \left(h_\theta(x^{(i)})-y^{(i)}
\right)^2 
</script>

<p>目标：</p>

<script type="math/tex; mode=display">
\min\limits_{\Theta} J{(\Theta)}
</script>

<p>回想下我们学过的数学知识吧，给定一个函数，求函数的最值，导数？梯度？那一套东西想起来了吧，OK。那好办了。要是还不是很清楚，那看一下<a href="http://zh
.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6">梯度</a>以及<a href="http://zh.wikipedia.org/wiki/%
E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95">梯度下降法</a>在此就不罗嗦了。Andrew
Ng在视频中讲的很形象，只要我们沿着山最陡的方向向下走，就会有可能找到最小值，翻译成数学语言就是沿着梯度相反的方向$- \nabla F(x)$,
就可以下降最快。（我们不是要找最小值么，当然是水往低处流！所以就是负值了）</p>

<h4 id="section-2">梯度下降法</h4>

<p>选定了回归模型，那就要确定参数$\Theta$了，$\Theta$只有在$J{(\Theta)}
$最小的情况下才能确定，所以问题归结为了求极小值的问题，梯度下降法是个不错的选择。当然，它会遇到找到的值只是个局部最小值。</p>

<p>这是示意图：</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f4.png?raw=true" alt="最小值" /></p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f5.png?raw=true" alt="局部极小值" /></p>

<p>流程如下：</p>

<ol>
  <li>对$\Theta$赋予初始值，可随机，可为零向量。</li>
  <li>同步改变$\Theta$值，使得$J{(\Theta)}$沿着梯度下降的方向走，直到学习曲线平滑，也就是收敛。</li>
</ol>

<p>用公式来描述就是,对于$j=1$和$j=0$，同时重复以下操作，直到$J{(\Theta)}$收敛。</p>

<script type="math/tex; mode=display">
\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}
J{(\theta_0,\theta_1) } \\
\theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^m 
\left(h_\theta(x^{(i)})-y^{(i)}
\right) \cdot x_j^{(i)}
</script>

<p>这是octave实现，向量形式,代码<a href="https://github.com/aluenkinglee/mlclass/blob/master/
mlclass-ex1/gradientDescent.m">详见</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="octave"><span class="line"><span class="k">function</span><span class="w"> </span>[theta, J_history] <span class="p">=</span><span class="w"> </span><span class="nf">gradientDescent</span><span class="p">(</span>X, y, theta, alpha, num_iters<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">%GRADIENTDESCENT Performs gradient descent to learn theta</span>
</span><span class="line"><span class="c">%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by </span>
</span><span class="line"><span class="c">%   taking num_iters gradient steps with learning rate alpha</span>
</span><span class="line">
</span><span class="line"><span class="c">% Initialize some useful values</span>
</span><span class="line"><span class="n">m</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">y</span><span class="p">);</span> <span class="c">% number of training examples</span>
</span><span class="line"><span class="n">J_history</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">num_iters</span><span class="p">,</span> 1<span class="p">);</span>
</span><span class="line"><span class="k">for</span> <span class="n">iter</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">num_iters</span>
</span><span class="line">    <span class="c">%theta1 = theta(1) - alpha * X(:,1)&#39; *(X * theta - y) / m;</span>
</span><span class="line">    <span class="c">%theta2 = theta(2) - alpha * X(:,2)&#39; *(X * theta - y) / m;</span>
</span><span class="line">    <span class="c">%theta = [theta1; theta2]</span>
</span><span class="line">    <span class="n">theta</span> <span class="p">=</span> <span class="n">theta</span> <span class="o">-</span> <span class="n">alpha</span> <span class="o">/</span> <span class="n">m</span> <span class="o">*</span> <span class="p">(</span><span class="n">X</span><span class="o">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">X</span> <span class="o">*</span> <span class="n">theta</span> <span class="o">-</span> <span class="n">y</span><span class="p">));</span>
</span><span class="line">    <span class="c">% Save the cost J in every iteration    </span>
</span><span class="line">    <span class="n">J_history</span><span class="p">(</span><span class="n">iter</span><span class="p">)</span> <span class="p">=</span> <span class="n">computeCost</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对应的C++实现，向量形式，代码<a href="https://github.com/aluenkinglee/mlclass/blob/master/mlclass
-ex1/gradientDescent.cpp">详见</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &quot;gradientDescent.h&quot;</span>
</span><span class="line"><span class="cp">#include &quot;computeCost.h&quot;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">mlclass</span><span class="o">::</span><span class="n">ex1</span><span class="p">;</span>
</span><span class="line"><span class="k">namespace</span> <span class="n">mlclass</span><span class="p">{</span>
</span><span class="line"><span class="k">namespace</span> <span class="n">ex1</span><span class="p">{</span>
</span><span class="line">    <span class="c1">//Performs gradient descent to learn theta</span>
</span><span class="line">    <span class="n">mat</span> <span class="n">gradientDescent</span><span class="p">(</span><span class="n">mat</span> <span class="n">X</span><span class="p">,</span> <span class="n">vec</span> <span class="n">y</span><span class="p">,</span> <span class="n">mat</span><span class="o">&amp;</span> <span class="n">theta</span><span class="p">,</span> <span class="kt">double</span> <span class="n">alpah</span><span class="p">,</span><span class="kt">long</span> <span class="n">num_inters</span><span class="p">){</span>
</span><span class="line">        <span class="c1">//number of training examples</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">m</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="n">n_rows</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">mat</span> <span class="n">J_history</span> <span class="o">=</span> <span class="n">zeros</span><span class="o">&lt;</span><span class="n">mat</span><span class="o">&gt;</span><span class="p">(</span><span class="n">num_inters</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_inters</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="n">theta</span> <span class="o">=</span> <span class="n">theta</span> <span class="o">-</span> <span class="n">alpah</span><span class="o">/</span><span class="n">m</span><span class="o">*</span> <span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">t</span><span class="p">()</span><span class="o">*</span> <span class="p">(</span><span class="n">X</span><span class="o">*</span><span class="n">theta</span> <span class="o">-</span> <span class="n">y</span><span class="p">));</span>
</span><span class="line">            <span class="n">J_history</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">computeCost</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">J_history</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>有一个事情需要说明一下</strong></p>

<p>梯度下降发的收敛速度比较慢，相比于直接用公式求解$\theta$来说，尤其是当m较小的时候，比如说$m&lt;10000$,
这个时候用公式求解$\theta$比较快，但是大于这个值之后，计算矩阵的逆是花费较大的，此时使用梯度下降法比较理想，而且可以做到分布式计算值，加快求解速度。</p>

<script type="math/tex; mode=display">
\Theta=(X^TX)^-1X^Ty
</script>

<p>关于线性回归就先到这，接下来会记述关于logistic回归等的文章。</p>

<blockquote>
  <p>reference</p>
</blockquote>

<p>1.<a href="https://class.coursera.org/ml-004/lecture">Machine Learning by Andrew Ng(1-2)</a></p>

<p>2.<a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可爱的Armadillo]]></title>
    <link href="http://aluenkinglee.com/blog/2013/12/31/ke-ai-de-armadillo/"/>
    <updated>2013-12-31T10:25:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/12/31/ke-ai-de-armadillo</id>
    <content type="html"><![CDATA[<p>最近又重新看了一下coursera上的<a href="https://class.coursera.org/ml-004/lecture/index">机器学习</a>(Andrew Ng讲的)，比起之前上老师的课和<a href="http://book.douban.com/subject/1102235/" title="机器学习">机器学习</a>这本书来说，简直好太多。当初选修这个课程的时候明显感到编程实践环节太少，很不适应，只有一个大作业而已。好在这里的Quara和Programming Excises很给力。</p>

<p>我的设想是这样，octave作为一种快速验证想法的工具不适合应用在实际的生产环境中的，毕竟计算速度还是可以依靠集群和并行化来加快大数据处理。在此参考了C++的<a href="http://en.wikipedia.org/wiki/Comparison_of_linear_algebra_libraries">线性代数库</a>之后选择了Armadillo,毕竟经常更新并且从官网资料来看，和octave代码相似便于移植，再说，从它本身和其他的对比来看，速度也是相当快的。</p>

<p>不过，在安装完Armadillo之后，编译example目录下的例子并不通过，提示</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/tmp/cc9ckDKG.o: In function `void arma::gemv&lt;false, false, false&gt;::apply_blas_type&lt;double&gt;(double*, arma::Mat&lt;double&gt; const&amp;, double const*, double, double)':
</span><span class="line">example1.cpp:(.text._ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdEEvPT_RKNS_3MatIS3_EEPKS3_S3_S3_[_ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdEEvPT_RKNS_3MatIS3_EEPKS3_S3_S3_]+0x7a): undefined reference to `wrapper_dgemv_'
</span><span class="line">/tmp/cc9ckDKG.o: In function `main':
</span><span class="line">example1.cpp:(.text.startup+0x1a5d): undefined reference to `wrapper_ddot_'
</span><span class="line">collect2: error: ld returned 1 exit status</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后看了readme里面的编译链接部分，发现即使尝试</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">g++ example1.cpp -o example1 -O2 -llapack -lblas</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也是不行。所以不甘心的看了<code>/usr/include/armadillo_bits/config.hpp</code>，找到了<code>#define ARMA_USE_WRAPPER</code>,并把它注释掉,就像这样</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//// #define ARMA_USE_WRAPPER
</span><span class="line">//// Comment out the above line if you're getting linking errors when compiling your programs,
</span><span class="line">//// or if you prefer to directly link with LAPACK and/or BLAS.
</span><span class="line">//// You will then need to link your programs directly with -llapack -lblas instead of -larmadillo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在用上面的命令就可以了。</p>

<p>至于怎么安装，还是请看Readme吧各位。希望这个帖子能帮助有类似问题的人。（在debain系列的linux上有可能会有这样的问题。）</p>

<p>接下来，应该就会把之前看过的视频和资料的东西在整理一下，并借用这个库实现应该实现的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install nox on debian-bug fixed]]></title>
    <link href="http://aluenkinglee.com/blog/2013/11/13/install-nox-on-debian-bug-fixed/"/>
    <updated>2013-11-13T22:44:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/11/13/install-nox-on-debian-bug-fixed</id>
    <content type="html"><![CDATA[<p>首先需要声明的一点是，到目前（2013/11）Nox在所有SDN控制器中不是最火的（相比Pox，floodlight），但是作为最先开发的一个SDN而言，还是有研究意义的。</p>

<!--more-->

<h5 id="section">安装提示</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /etc/apt/sources.list.d/
</span><span class="line">sudo wget http://openflowswitch.org/downloads/debian/nox.list
</span><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install nox-dependencies
</span><span class="line">sudo apt-get install libtbb-dev
</span><span class="line">sudo apt-get install libboost-serialization-dev libboost-all-dev</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在你想放置Nox源码的地方做如下操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/noxrepo/nox
</span><span class="line">cd nox
</span><span class="line">./boot.sh
</span><span class="line">mkdir build
</span><span class="line">cd build
</span><span class="line">../configure
</span><span class="line">make -j 5
</span><span class="line">make install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很不幸，遇到了如下的错误：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">../../src/builtin/component.cc:414:1: required from here
</span><span class="line">/usr/include/boost/property_tree/detail/json_parser_read.hpp:105:17: error:
</span><span class="line">no matching function for call to ‘boost::property_tree::basic_ptree
</span><span class="line">std::basic_string&lt;char, std::basic_string &gt;::push_back(std::pair
</span><span class="line">std::basic_string&lt;char, std::basic_string &gt;)’
</span><span class="line">/usr/include/boost/property_tree/detail/json_parser_read.hpp:105:17: note:
</span><span class="line">candidate is:
</span><span class="line">In file included from /usr/include/boost/property_tree/ptree.hpp:516:0,
</span><span class="line">from ../../src/include/component.hh:35,
</span><span class="line">from ../../src/builtin/component.cc:18:
</span><span class="line">/usr/include/boost/property_tree/detail/ptree_implementation.hpp:362:9:
</span><span class="line">note: boost::property_tree::basic_ptree::iterator
</span><span class="line">boost::property_tree::basic_ptree::push_back(const value_type&amp;) [with Key =
</span><span class="line">std::basic_string; Data = std::basic_string; KeyCompare = std::less
</span><span class="line">std::basic_string&lt;char &gt;; boost::property_tree::basic_ptree::value_type =
</span><span class="line">std::pair, boost::property_tree::basic_ptreestd::basic_string&lt;char,
</span><span class="line">std::basic_string &gt; &gt;]
</span><span class="line">/usr/include/boost/property_tree/detail/ptree_implementation.hpp:362:9:
</span><span class="line">note: no known conversion for argument 1 from ‘std::pair
</span><span class="line">std::basic_string&lt;char, std::basic_string &gt;’ to ‘const value_type&amp; {aka
</span><span class="line">const std::pair, boost::property_tree::basic_ptreestd::basic_string&lt;char,
</span><span class="line">std::basic_string &gt; &gt;&amp;}’
</span><span class="line">make[4]: *** [nox_core-component.o] Error 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个错误来源于nox依赖的boost库版本（1.49）的错误.注意错误原因是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/usr/include/boost/property_tree/detail/json_parser_read.hpp:105
</span><span class="line">error:
</span><span class="line">no matching function for call to ‘boost::property_tree::basic_ptree
</span><span class="line">std::basic_string&lt;char, std::basic_string &gt;::push_back(std::pair
</span><span class="line">std::basic_string&lt;char, std::basic_string &gt;)’</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的问题点击<a href="http://lists.noxrepo.org/pipermail/nox-dev-noxrepo.org/2013-February/000668.html" title="[nox-dev] Nox build fails">这里</a></p>

<p>解决方法：<code>/usr/include/boost/property_tree/detail/json_parser_read.hpp</code>找到这个文件。定位到<code>105行，</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">c.stack.back()-&gt;push_back(std::make_pair(c.name, Str(b, e)));</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>换成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">c.stack.back()-&gt;push_back(std::make_pair(c.name, Ptree(Str(b, e))));</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重新make&amp;&amp; make install 即可。</p>

<h5 id="reference">Reference</h5>

<ol>
  <li>
    <p><a href="https://svn.boost.org/trac/boost/ticket/6785">read_json does not compile on GCC 4.7.0 with std=c++11</a></p>
  </li>
  <li>
    <p><a href="http://lists.noxrepo.org/pipermail/nox-dev-noxrepo.org/2013-February/000668.html">nox-dev Nox build fails</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在不同PC上协同写作同一个Octopress博客]]></title>
    <link href="http://aluenkinglee.com/blog/2013/11/13/co-write-same-octopress-blog-on-different-pc/"/>
    <updated>2013-11-13T15:20:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/11/13/co-write-same-octopress-blog-on-different-pc</id>
    <content type="html"><![CDATA[<p>因为需要在不同的地方写博客，在加上之前错误的操作，所以有了这篇文章。</p>

<p>假设已经学会了然后安装Octopress博客。</p>

<h2 id="octopress-">Octopress 分支说明</h2>

<p>Octopress的git仓库(repository)有两个分支，分别是<code>master</code>和<code>source</code>，其中：</p>

<ol>
  <li>
    <p><code>master</code>存储的是博客网站本身，github基于此对页面渲染。该分支根目录处在<code>_deploy</code>文件夹，由<code>rake deploy</code>命令推送到服务器，一般而言，我们不需要对<code>master</code>做任何操作。</p>
  </li>
  <li>
    <p><code>source</code>存储的是生成博客的源文件（各种markdown文件）,写作博客是在这个分支。每次写完之后，记得推送到服务器。这样就不用担心我们的备份了。</p>
  </li>
</ol>

<!--more-->

<h2 id="git">克隆服务器上的git到新机器</h2>

<p>将博客的源文件clone到本地的（假设就叫做）octopress文件夹内。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone -b source git@github.com:username/username.github.com.git octopress</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来这步骤是最重要的，当初栽在这儿了。(会出现<code>No such file or directory - _deploy</code>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd octopress
</span><span class="line">$ git clone -b master git@github.com:username/username.github.com.git _deploy </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还是要安装博客的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gem install bundler
</span><span class="line">$ rbenv rehash    		# If you use rbenv, rehash to be able to run the bundle command
</span><span class="line">$ bundle install
</span><span class="line">$ rake setup_github_pages	#执行初始化</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后会提示输入仓库的ssh url。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Enter the read/write url for your repository
</span><span class="line">(For example, 'git@github.com:your_username/your_username.github.com)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="co-write-">Co-write 协同写作博客</h2>

<p>如果你是和别人合作博客，或者自己同时在好几个电脑上写博客，每次开始之前，git pull origin source获得最新的文件,rake generate生成新的页面.更新master并不是必须的，因为你更改源文件之后还是需要rake generate的.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd octopress
</span><span class="line">$ git pull origin source  	# update the local source branch
</span><span class="line">$ cd ./_deploy
</span><span class="line">$ git pull origin master  	# update the local master branch</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在source分支做了博客的发布，或者改变了博客的设置之后</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake generate		 	#生成新的页面
</span><span class="line">
</span><span class="line">$ git add .
</span><span class="line">$ git commit -am "Some comment here." 
</span><span class="line">$ git push origin source  	# 上面三行是更新远端source分支
</span><span class="line">
</span><span class="line">$ rake deploy             	# 更新远端master分支，文章就发布到了博客中</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reference">Reference</h2>

<ol>
  <li>
    <p><a href="http://williamherry.com/blog/2012/07/20/octopress-setup/">Octopress - 像黑客一样写博客</a></p>
  </li>
  <li>
    <p><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">Setting up a Blog and Contributing to an Existing One</a></p>
  </li>
  <li>
    <p><a href="http://boboshone.com/blog/2013/06/05/write-octopress-blog-on-multiple-machines/">在多台电脑上写Octopress博客</a></p>
  </li>
  <li>
    <p><a href="http://www.whispering.co/blog/2011/12/03/octopress-for-freshman/">Octopress: 新手教程</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use MathJax in Octopress to Write beautiful LaTex]]></title>
    <link href="http://aluenkinglee.com/blog/2013/11/13/use-mathjax-in-octopress-to-write-beautiful-latex/"/>
    <updated>2013-11-13T12:37:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/11/13/use-mathjax-in-octopress-to-write-beautiful-latex</id>
    <content type="html"><![CDATA[<h4 id="latex">首先看下$\LaTeX$的例子</h4>

<ul>
  <li>块状的$\LaTeX$ 数学公式 (1)</li>
</ul>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<!--more-->

<ul>
  <li>块状的$\LaTeX$ 数学公式 (2)</li>
</ul>

<p>另外一个例子<a href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution" title="Multivariate normal distribution">Multivariate normal distribution</a>:</p>

<script type="math/tex; mode=display">
f_x(x_1,...,x_k)=\frac{1}{(2\pi)^{k/2}|\Sigma|^{1/2}}exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))
</script>

<ul>
  <li>内联$\LaTeX$ 数学公式 (3)</li>
</ul>

<p>在段内插入LaTeX代码： $\exp(-\frac{x^2}{2})$ 。</p>

<h4 id="latex-support">$\LaTeX$ support</h4>

<p>为了能够使用MathJax对数学公式渲染，还是得使用几个步骤的。</p>

<ul>
  <li>添加ramdown组件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install kramdown</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>找到<code>source/_includes/custom/head.html</code>这个文件，加入以下内容</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">MathJax.Hub.Register.StartupHook("TeX Jax Ready",function () {
</span><span class="line">          MathJax.InputJax.TeX.prefilterHooks.Add(function (data) {
</span><span class="line">                  data.math = data.math.replace(/^\s*&lt;!\[CDATA\[\s*((?:\n|.)*)\s*\]\]&gt;\s*$/m,"$1");
</span><span class="line">                    });
</span><span class="line">          });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">  MathJax.Hub.Config({
</span><span class="line">    tex2jax: {
</span><span class="line">      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
</span><span class="line">      processEscapes: true
</span><span class="line">    }
</span><span class="line">  });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">    MathJax.Hub.Config({
</span><span class="line">      tex2jax: {
</span><span class="line">        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
</span><span class="line">      }
</span><span class="line">    });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">    MathJax.Hub.Queue(function() {
</span><span class="line">        var all = MathJax.Hub.getAllJax(), i;
</span><span class="line">        for(i=0; i &lt; all.length; i += 1) {
</span><span class="line">            all[i].SourceElement().parentNode.className += ' has-jax';
</span><span class="line">        }
</span><span class="line">    });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/javascript"
</span><span class="line">   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;
</span><span class="line">&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>修改_config.yml 文件 把markdown的渲染引擎从<code>rdiscount</code> 变为<code>kramdown</code></p>
  </li>
  <li>
    <p>对于内联的$\LaTeX$ 数学公式，只需简单使用<code>$</code>…<code>$</code>即可。</p>
  </li>
</ul>

<p>就像这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">在段内插入LaTeX代码： $\exp(-\frac{x^2}{2})$ 。</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>对于块状的$\LaTeX$ 数学公式，只需简单使用<code>$$</code>…<code>$$</code>即可。
就像这样：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$
</span><span class="line">f_x(x_1,...,x_k)=\frac{1}{(2\pi)^{k/2}|\Sigma|^{1/2}}exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))
</span><span class="line">$$</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="reference">Reference</h4>

<p><a href="http://kkx.github.io/blog/2012/05/05/zai-octopresszhong-shi-yong-latex/" title="在octopress中使用latex">在octopress中使用latex</a></p>

<p><a href="http://kqueue.org/blog/2012/01/05/hello-world/" title="Hello world">Hello world</a></p>

<p><a href="http://hungmingwu-blog.logdown.com/posts/14279-latex-on-octopress" title="在Octopress中使用Latex">在Octopress中使用Latex</a></p>

<p><a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/" title="在Octopress中使用Latex">在Octopress中使用Latex</a></p>

<p><a href="http://wowubuntu.com/markdown/#p" title="Markdown 语法说明 (简体中文版)">Markdown 语法说明 (简体中文版)</a></p>

<p><a href="http://kramdown.gettalong.org/syntax.html#math-blocks" title="kramdown Syntax">kramdown Syntax</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++前置声明和复制控制]]></title>
    <link href="http://aluenkinglee.com/blog/2013/10/24/c-plus-plus-forward-declaration-and-copy-control/"/>
    <updated>2013-10-24T05:33:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/10/24/c-plus-plus-forward-declaration-and-copy-control</id>
    <content type="html"><![CDATA[<p>突然有兴致想起了看会C++，因为最近一直是python，java，python的节奏…在这样下去，C++水平恐怕就停留在了只会编算法的地儿了…</p>

<p>随手一翻，看到了复制控制。对于这章，印象里的记忆是：
» 如果一个类它有形如指针或者申请了其他的系统资源成员，这个时候就得注意了，如申请资源，如何释放资源，复制的时候应该注意这些成员的行为是怎么样的。</p>

<p>然后，就不是很清楚了。大概看了看 其实也差不多…好吧是差很多。编程的过程中出现了一些问题。在这里记录下来&gt;.&lt; 真实忘不了了！</p>

<h5 id="section">复制构造函数</h5>
<p>它是一个特殊的构造函数，而且形参常用const Type&amp; 来修饰(如果凶残点，用指针也不是不行，但一定得是这两种！想想是为什么？)</p>

<!--more-->
<p>有两种情况会调用它：</p>

<ol>
  <li>定义一个新对象，并用一个同类型的对象对它初始化，就像这样 <code>string fileDesp(filename);</code>此处的filename是已经定义好的对象。’显示调用’</li>
  <li>复制一个对象，并把它作为实参传给一个函数。’隐式调用’</li>
  <li>从函数返回时复制一个对象。’隐式调用’</li>
  <li>初始化顺序容器中的元素。’隐式调用’</li>
  <li>根据元素初始化列表初始化数组元素。’隐式调用’</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">string</span> <span class="n">book</span> <span class="o">=</span> <span class="s">&quot;ISBN-2323-23234&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>创建book对象时，编译器首先会接受一个C语言风格形参的string构造函数，创建一个临时对象，然后调用string的复制构造函数将book初始化那个临时对象的副本。（但是我感觉更像是’临时对象-&gt;赋值操作’..这里需要编码测试一下）</p>

<p>和java，python创建对象的方法来比,C++方法真心多…</p>

<h5 id="section-1">合成的复制构造函数</h5>
<p>就是自个没写编译器默认提供的复制构造函数，完成的功能很简单，数据成员逐个初始化，（<code>static</code>成员例外！！因为他们是属于类的！！）</p>

<h5 id="explicit">关于explicit的复制构造函数</h5>
<p>(以后加上，真心没写过，只知道IO类型的复制构造函数都是explicit的)</p>

<h5 id="section-2">赋值重载</h5>
<p>=是个二元运算符，所以有两个形参，分别对应左操作数和右操作数(const引用),当为成员函数时就是左操作数默认绑定到this指针上了。返回值为同一类型的引用。</p>

<h5 id="section-3">关于析构函数</h5>
<p>析构函数就是用来回收那些申请的系统资源的。所以自个度量何时该自己写给类的析构函数吧。</p>

<h5 id="section-4">关于何时调用析构函数</h5>
<ol>
  <li>撤销类的对象自动调用</li>
  <li>动态分配的对象只有在删除指向该指针时，才会运行析构函数！！否则会导致内存泄漏，小心啦。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">string</span> <span class="n">filename</span> <span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">string</span><span class="p">();</span>
</span><span class="line"><span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上述删除的行为不会销毁属于类的成员对象——static成员！其实挺好理解的啊。</p>

<p>下面是个例子。现在先在这里贴下代码，以后放到github里面去。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;set&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="c1">//predeclaration of Message</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Message</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Folder</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">Folder</span><span class="p">(){</span>
</span><span class="line">    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Folder&quot;</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">Folder</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Folder</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span> <span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="o">~</span><span class="n">Folder</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">save</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">addMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;</span> <span class="n">messages</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">put_Folder_in_Message</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove_Folder_from_Message</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Message</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span> <span class="n">str</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">contents</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class="line">        <span class="p">{}</span>
</span><span class="line">    <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Message</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="o">~</span><span class="n">Message</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">save</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">addFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="n">string</span> <span class="n">contents</span><span class="p">;</span>
</span><span class="line">    <span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;</span> <span class="n">folders</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">put_Msg_in_Folders</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove_Msg_from_Folders</span><span class="p">();</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">Folder</span><span class="o">::</span><span class="n">Folder</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span><span class="o">&amp;</span> <span class="n">f</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">    <span class="n">messages</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">messages</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">put_Folder_in_Message</span><span class="p">(</span><span class="n">messages</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">put_Folder_in_Message</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;</span> <span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;::</span><span class="n">const_iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class="line">            <span class="n">beg</span> <span class="o">!=</span> <span class="n">msg</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span><span class="line">            <span class="o">++</span><span class="n">beg</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">addFldr</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">Folder</span><span class="o">&amp;</span> <span class="n">Folder</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span> <span class="o">&amp;</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">f</span> <span class="o">!=</span> <span class="k">this</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//先把自己的给清除掉，在加上要赋值的，要不然肯定不一样。。</span>
</span><span class="line">        <span class="c1">//因为Messages不一样。。</span>
</span><span class="line">        <span class="n">remove_Folder_from_Message</span><span class="p">();</span>
</span><span class="line">        <span class="n">messages</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">messages</span><span class="p">;</span>
</span><span class="line">        <span class="n">put_Folder_in_Message</span><span class="p">(</span><span class="n">messages</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">remove_Folder_from_Message</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;::</span><span class="n">const_iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">messages</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class="line">            <span class="n">beg</span> <span class="o">!=</span> <span class="n">messages</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span><span class="line">            <span class="o">++</span><span class="n">beg</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">remFldr</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">Folder</span><span class="o">::~</span><span class="n">Folder</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">remove_Folder_from_Message</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">save</span><span class="p">(</span><span class="n">Message</span> <span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">addMsg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line">    <span class="n">msg</span><span class="p">.</span><span class="n">addFldr</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">remove</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">remMsg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line">    <span class="n">msg</span><span class="p">.</span><span class="n">remFldr</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">addMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">messages</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Folder</span><span class="o">::</span><span class="n">remMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">messages</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//copy construction ,put the new message into the folders where the msg is pointed.</span>
</span><span class="line"><span class="kr">inline</span> <span class="n">Message</span><span class="o">::</span><span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span><span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">    <span class="n">contents</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">contents</span><span class="p">),</span> <span class="n">folders</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">folders</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">put_Msg_in_Folders</span><span class="p">(</span><span class="n">folders</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">put_Msg_in_Folders</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">folders</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;::</span><span class="n">const_iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="n">folders</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class="line">            <span class="n">beg</span> <span class="o">!=</span> <span class="n">folders</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span><span class="line">            <span class="o">++</span> <span class="n">beg</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//beg is a pointer to Folder*</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">addMsg</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">inline</span> <span class="n">Message</span><span class="o">&amp;</span> <span class="n">Message</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span> <span class="o">!=</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">//首先把自己指向的那些folder都给取消掉</span>
</span><span class="line">        <span class="n">remove_Msg_from_Folders</span><span class="p">();</span>
</span><span class="line">        <span class="c1">//消息的内容copy过来</span>
</span><span class="line">        <span class="n">contents</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>
</span><span class="line">        <span class="n">folders</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">folders</span><span class="p">;</span>
</span><span class="line">        <span class="n">put_Msg_in_Folders</span><span class="p">(</span><span class="n">folders</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">remove_Msg_from_Folders</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;::</span><span class="n">const_iterator</span> <span class="n">beg</span> <span class="o">=</span> <span class="n">folders</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class="line">            <span class="n">beg</span> <span class="o">!=</span> <span class="n">folders</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span><span class="line">            <span class="o">++</span><span class="n">beg</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">remMsg</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">inline</span> <span class="n">Message</span><span class="o">::~</span><span class="n">Message</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">remove_Msg_from_Folders</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">save</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span> <span class="n">folder</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">addFldr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">folder</span><span class="p">);</span>
</span><span class="line">    <span class="n">folder</span><span class="p">.</span><span class="n">addMsg</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">addFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span> <span class="n">pfolder</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">folders</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pfolder</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">remove</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span> <span class="n">folder</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">remFldr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">folder</span><span class="p">);</span>
</span><span class="line">    <span class="n">folder</span><span class="p">.</span><span class="n">remMsg</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">Message</span><span class="o">::</span><span class="n">remFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span> <span class="n">pfolder</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">folders</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pfolder</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">Message</span> <span class="n">m</span><span class="p">(</span><span class="s">&quot;dsfasdf&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="n">Folder</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Folder</span><span class="p">();</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;asdf&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以运行，但是不是想要的。</p>

<p>正确的应该分开写</p>

<p><code>Folder.h</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;set&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef __Folder__</span>
</span><span class="line"><span class="cp">#define __Folder__</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cp">#include &quot;Message.h&quot;</span>
</span><span class="line"><span class="c1">//predeclaration of Message</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Message</span><span class="p">;</span>
</span><span class="line"><span class="c1">// Message is a incomplete type.It can be used in limited ways only.</span>
</span><span class="line"><span class="c1">// 1.can not define object of this type.</span>
</span><span class="line"><span class="c1">// 2.only used as a pointer or ref.</span>
</span><span class="line"><span class="c1">// 3.declare it as the formal parameter of a function or return type of a function.</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Folder</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">Folder</span><span class="p">(){}</span>
</span><span class="line">    <span class="n">Folder</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Folder</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="o">~</span><span class="n">Folder</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Message is used as the formal parameter.</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">save</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">addMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remMsg</span><span class="p">(</span><span class="n">Message</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="c1">// Message is used as the typename of the template.</span>
</span><span class="line">    <span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;</span> <span class="n">messages</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="n">put_Folder_in_Message</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">*&gt;&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove_Folder_from_Message</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Message.h</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;set&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef __Message__</span>
</span><span class="line"><span class="cp">#define __Message__</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>
</span><span class="line"><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &quot;Folder.h&quot;</span>
</span><span class="line"><span class="c1">//predeclaration of Folder</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Folder</span><span class="p">;</span>
</span><span class="line"><span class="c1">// Folder is a incomplete type.It only can be used in limited ways.</span>
</span><span class="line"><span class="c1">// 1.can not define object of this type.</span>
</span><span class="line"><span class="c1">// 2.only used as a pointer or ref.</span>
</span><span class="line"><span class="c1">// 3.declare it as the formal parameter of a function or return type of a function.</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Message</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span> <span class="n">str</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">contents</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{}</span>
</span><span class="line">    <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Message</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="o">~</span><span class="n">Message</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Folder is used as the formal parameter.</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">save</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove</span><span class="p">(</span><span class="n">Folder</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">addFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remFldr</span><span class="p">(</span><span class="n">Folder</span><span class="o">*</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="n">string</span> <span class="n">contents</span><span class="p">;</span>
</span><span class="line">    <span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;</span> <span class="n">folders</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Folder is used as the typename of the template.</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">put_Msg_in_Folders</span><span class="p">(</span><span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="n">Folder</span><span class="o">*&gt;&amp;</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="n">remove_Msg_from_Folders</span><span class="p">();</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一个简单的例子，就是来测试一下<code>class A=B</code>时究竟会不会同时调用赋值构造函数和拷贝构造函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">object</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">object</span><span class="p">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">data</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;default constructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">object</span><span class="p">(</span><span class="k">const</span> <span class="n">object</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">data</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;copy constructor&quot;</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">object</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">object</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">&amp;</span><span class="n">other</span> <span class="o">!=</span> <span class="k">this</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">data</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;assignment constructor&quot;</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">behavior1</span><span class="p">(</span><span class="n">object</span> <span class="n">other</span><span class="p">)</span>	<span class="c1">//形参调用copy constructor</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;test behavior1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">behavior2</span><span class="p">(</span><span class="n">object</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;test behavior2&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">object</span> <span class="n">A</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">object</span> <span class="n">B</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">object</span> <span class="n">C</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>  <span class="c1">//这个情况仍然只是调用copy constructor</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">C</span><span class="o">=</span><span class="n">B</span><span class="p">;</span>	   <span class="c1">//只有这种情况下才会调用assignment constructor</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">behavior1</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">behavior2</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试结果显示如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">default constructor
</span><span class="line">
</span><span class="line">copy constructor
</span><span class="line">
</span><span class="line">copy constructor
</span><span class="line">
</span><span class="line">assignment constructor
</span><span class="line">
</span><span class="line">copy constructor
</span><span class="line">test behavior1
</span><span class="line">
</span><span class="line">test behavior2
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualbox网络环境和登录]]></title>
    <link href="http://aluenkinglee.com/blog/2013/10/20/virtualbox-network-environment-and-login/"/>
    <updated>2013-10-20T22:46:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/10/20/virtualbox-network-environment-and-login</id>
    <content type="html"><![CDATA[<p>最近由于实验室需要研究SDN的一些东西，再此先来搭配下环境。
对于虚拟机的一些选择，可以看这里:
<a href="http://mininet.org/vm-setup-notes/">vm-setup-notes</a> 
我这里的环境是:</p>

<p><code>os:            debian 7(wheezy) 64bit</code></p>

<p><code>xwindows:      kde</code></p>

<p><code>VM：           virtualbox</code></p>

<p><code>controller:    pox</code></p>

<!--more-->

<p>按照上述的网址，可以比较容易的搭配出来需要的环境，下面就说以下之后遇到的问题。</p>

<ul>
  <li>virtualbox的鼠标独占问题，只是提示太不明明显了！对于那个right ctrl的提示我郁闷了好一会，我以为是鼠标右键+ctrl…其实是右边的ctrl键。对于这个键的设定，你可以从“管理”&gt;“全局设定”&gt;”热键”来设置你喜欢的按键..我就吐槽这么一句，之前vmware对此的说明很明了！</li>
  <li>Using Host-only adapter to SSH guest from host.</li>
</ul>

<h3 id="nat">NAT模式</h3>
<p>特点：
1. 如果主机可以上网，虚拟机可以上网
2. 虚拟机之间不能ping通
3. 虚拟机可以ping通主机（此时ping虚拟机的网关，即是ping主机）
4. 主机不能ping通虚拟机</p>

<p>但是这个情况下是不能满足我的使用条件…我需要在host登录到guest中，so pass</p>

<h3 id="section">桥接模式</h3>
<p>特点：
1. 如果主机可以上网，虚拟机可以上网
2. 虚拟机之间可以ping通
3. 虚拟机可以ping通主机
4. 主机可以ping通虚拟机 (以上各点基于一个前提：主机可以上网)
5. 如果主机不可以上网，所有1-4特点均无</p>

<p>这个挺好，觉得可以满足我的要求但是，发现它的IP地址要求是自动非配的，我们实验室的IP是校园内网固定IP…</p>

<h3 id="host-only-adapter">Host-only Adapter模式</h3>

<p>特点：</p>

<ol>
  <li>虚拟机<code>不</code>可以上网</li>
  <li>虚拟机之间可以ping通</li>
  <li>虚拟机可以ping通主机（注意虚拟机与主机通信是通过主机的名为VirtualBox Host-Only Network的网卡，因此ip
是该网卡ip <code>192.168.56.1</code>，而不是你现在正在上网所用的ip）</li>
  <li>主机可以ping通虚拟机</li>
</ol>

<p>应用场景：
需要搭建一个模拟局域网，所有机器可以互访。（颇不得以选这个的..）</p>

<p>ip样式：<code>netstat -rn</code>查看路由表
ip 与本机VirtualBox Host-Only Network的网卡ip在同一网段内（默认192.168.56.*）
网关 本机VirtualBox Host-Only Network的网卡ip（默认192.168.56.1）</p>

<h3 id="section-1">登录虚拟机</h3>
<p>登录虚拟机，首先开开virtualbox的虚拟机</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mininet-vm login: mininet
</span><span class="line">Password: mininet</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来查看我们的vm地址：（在guest里面操作）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo ifconfig</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>例如我这里的ip地址是<code>192.168.56.101</code>,然后就使用我们可爱的SSH</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh -Y mininet@192.168.56.101</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>输入密码就可以了</p>

<p>当然上面的不好看，做下别名好了。（在我们host里面操作）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo nano /etc/hosts
</span><span class="line">192.168.56.101 mininet-vm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>保存即可，这样子就可以使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh -Y mininet@mininet-vm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来就可以去玩下面的实验了^^</p>

<blockquote>
  <p>参考文档:</p>
</blockquote>

<blockquote>
  <p><a href="http://blog.csdn.net/yxc135/article/details/8458939">VirtualBox虚拟机网络环境解析</a></p>
</blockquote>

<blockquote>
  <p><a href="http://www.live-in.org/archives/832.html">ssh命令用于远程登录上Linux主机</a></p>
</blockquote>

<blockquote>
  <p><a href="http://mininet.org/vm-setup-notes/">SSH into VM</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql交换两列]]></title>
    <link href="http://aluenkinglee.com/blog/2013/06/14/mysqljiao-huan-liang-lie/"/>
    <updated>2013-06-14T15:35:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/06/14/mysqljiao-huan-liang-lie</id>
    <content type="html"><![CDATA[<p>事情的起因是这个发现数据库中出现了某两列数据正好颠倒了，大部分数据都是正常的，
这些错误的原因是数据源有问题，今天在进一步的做标签聚类的时候分析的时候发现这
些占很小比例的误差，辛亏发现了，否则做出来的结果有可能会郁闷很久。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select id,place_lat,place_lon from `nearbyinfo` where `nearbyinfo`.`place_lat`&gt;0;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正常的数据都是&lt; <code>39.xxx</code>, <code>160.2xxx</code> &gt;之间，如图所示:
<!--more--></p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2013-06-14-mysqljiao-huan-liang-lie/11.png?raw=true" alt="正常数据" title="正常数据" /></p>

<p>但是幸好及时发现了存在这样的数据，</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2013-06-14-mysqljiao-huan-liang-lie/12.png?raw=true" alt="异常数据" title="异常数据" /></p>

<p>一开始想的是想写sql语句试着把这两栏的数据给交换过来，可是sql太渣…然后就想着找
到这些ID和他们的坐标值（都已经出来了），然后用python读出来写成update的语句，
然后在执行一下就可以了，这也太…</p>

<p>辛亏最终还是找到了，在这还是完整的说明一下吧。首先创建一个表，在Mysql中</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">CREATE DATABASE  IF NOT EXISTS `weibodata` 
</span><span class="line">USE `weibodata`;
</span><span class="line">DROP TABLE IF EXISTS `test`;
</span><span class="line">CREATE TABLE `test` (
</span><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,
</span><span class="line">  `a` varchar(45) DEFAULT NULL,
</span><span class="line">  `b` varchar(45) DEFAULT NULL,
</span><span class="line">  PRIMARY KEY (`id`)
</span><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
</span><span class="line">LOCK TABLES `test` WRITE;
</span><span class="line">INSERT INTO `test` VALUES (1,'-1','4'),(2,'3','2');
</span><span class="line">UNLOCK TABLES;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以看起来会是这个样子:</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2013-06-14-mysqljiao-huan-liang-lie/12.png?raw=true" alt="交换之前" title="交换之前" /></p>

<p>然后执行下面的语句，会发生第二行swap了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">UPDATE test t1,test t2 SET t1.a=t1.b,t2.b=t2.a where t1.id =t2.id and t1.a&gt;0;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2013-06-14-mysqljiao-huan-liang-lie/12.png?raw=true" alt="交换之后" title="交换之后" /></p>

<p>在尝试一下就会变成原样。</p>

<p>问题解决了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select id,place_lat,place_lon from nearbyinfo where place_lat &gt;100;
</span><span class="line">UPDATE nearbyinfo t1,nearbyinfo t2 SET t1.place_lat=t1.place_lon,t2.place_lon=t2.place_lat where t1.id = t2.id and t1.place_lat&gt;100;
</span><span class="line">select id,place_lat,place_lon from nearbyinfo where id in (1025,4974,4814,2685);</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近期总结]]></title>
    <link href="http://aluenkinglee.com/blog/2013/04/17/jin-qi-zong-jie/"/>
    <updated>2013-04-17T17:13:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/04/17/jin-qi-zong-jie</id>
    <content type="html"><![CDATA[<p>一直以来对数据挖掘，推荐的算法比较感兴趣，可是大家也都知道如果只是看课本上的那些理论性的公式和说辞会给人一种很空泛的感觉，所以个人感觉迫切需要做这方面的实践。可惜做这些的最最最遗憾缺少的就是数据的问题。所以我的给自己整点数据。</p>

<p>还好这学期算是有时间，相对于上个学期一周n多的课程和大作业来说算是幸福多的了。（而且那个时候还要给师兄们各种帮忙，要写android程序版本中的几个activity，呵呵，不过很有意思，师兄有一个是做LBS信息匿名处理服务的，挺有意思，对比微博，人人中的定位&gt;.&lt;就会发现这个很有必要的，获取一个人的坐标信息还是很容易的。）所以就琢磨这弄点数据自己来搞，一开始我是想获得微博的数据，具体来说是获得某个人过去说过的话，然后分析什么样的人，什么样的性格，心理怎么样。（我认为计算机和其他学科的交叉才是王道，说到底，计算机，算法毕竟只是一种计算的工具和技术，和其他学科（比如地理，心理学，生物学）的交叉才会有更多新的发现，现在数据量都很多，人工时处理不了的。机器学习和数据挖掘的应用领域啦~）
<!-- more -->
不过跟老板交涉的结果是，嗯，想法是不错，可惜缺少可以定量分析心理学的依据，毕竟你不是研究过心理学的，没有话语权,论文不好发，没个几年时间你不好毕业&gt;&lt;。。好吧，从此我就踏上了LBSNs的不归路，呵呵。话说虽然Foursquare现在半死不活的，但是我个人认为不是LBS的不成功，而是Foursquare本省商业模式的问题，这个得专门写一篇文章，不在这里跑题了。</p>

<p>在LBSN中除了可以分析用户的行为轨迹，感觉这里面没有可以继续深入的了，因为在继续做下去就是匿名，而且很多人都已经做过了。基于地理位置上的数据挖掘和推荐貌似还不是很多(资料查的少的缘故，不敢妄下定论)。</p>

<p>通过新浪微博API调用获取地理位置信息</p>

<h6 id="section">目的</h6>

<p>获取带地理标签的微博数据，为以后分析数据使用。</p>

<h6 id="section-1">相关工作</h6>

<p><code>目前获取微博信息的方法有两种</code> </p>

<ol>
  <li>
    <p>编写网络爬虫抓取带地理标签的微博</p>
  </li>
  <li>
    <p>通过OAuth2.0认证使用微博提供的API获取微博</p>
  </li>
</ol>

<p><code>网络爬虫的基本工作流程如下</code> </p>

<ol>
  <li>
    <p>首先选取一部分精心挑选的种子URL；</p>
  </li>
  <li>
    <p>将这些URL放入待抓取URL队列；</p>
  </li>
  <li>
    <p>从待抓取URL队列中取出待抓取在URL，解析DNS，并且得到主机的ip，并将URL对应的网页下载下来，存储进已下载网页库中。此外，将这些URL放进已抓取URL队列。</p>
  </li>
  <li>
    <p>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环。</p>
  </li>
</ol>

<p><code>抓取策略</code></p>

<p>在爬虫系统中，待抓取URL队列是很重要的一部分。待抓取URL队列中的URL以什么样的顺序排列也是一个很重要的问题，因为这涉及到先抓取那个页面，后抓取哪个页面。而决定这些URL排列顺序的方法，叫做抓取策略。下面重点介绍几种常见的抓取策略：</p>

<ul>
  <li>
    <p>深度优先遍历策略</p>
  </li>
  <li>
    <p>宽度优先遍历策略</p>
  </li>
  <li>
    <p>反向链接数策略</p>
  </li>
  <li>
    <p>Partial PageRank策略</p>
  </li>
</ul>

<p>可是在使用这种方法的过程中，发现了微博在使用cookie登陆的过程中有个加密的处理，这个加密算法一时没有弄明白，我不知道具体的加密步骤所以也反解不出来。所以就使用了另外的方法。</p>

<p><code>使用OAuth2.0认证</code></p>

<p>OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。</p>

<p>OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。</p>

<h6 id="section-2">认证和授权过程</h6>

<p><code>在认证和授权的过程中涉及的三方包括</code></p>

<ol>
  <li>
    <p>服务提供方，用户使用服务提供方来存储受保护的资源，如照片，视频，联系人列表。</p>
  </li>
  <li>
    <p>用户 ，存放在服务提供方的受保护的资源的拥有者。</p>
  </li>
  <li>
    <p>客户端 ，要访问服务提供方资源的第三方应用。在认证过程之前，客户端要向服务提供者申请客户端标识。</p>
  </li>
</ol>

<p><code>使用OAuth进行认证和授权的过程如下所示</code></p>

<ol>
  <li>用户访问客户端的网站，想操作自己存放在服务提供方的资源。</li>
  <li>客户端向服务提供方请求一个临时令牌。</li>
  <li>服务提供方验证客户端的身份后，授予一个临时令牌。</li>
  <li>客户端获得临时令牌后，将用户引导至服务提供方的授权页面请求用户授权。在这个过程中将临时令牌和客户端的回调连接发送给服务提供方。</li>
  <li>用户在服务提供方的网页上输入用户名和密码，然后授权该客户端访问所请求的资源。</li>
  <li>授权成功后，服务提供方引导用户返回客户端的网页。</li>
  <li>客户端根据临时令牌从服务提供方那里获取访问令牌 。</li>
  <li>服务提供方根据临时令牌和用户的授权情况授予客户端访问令牌。</li>
  <li>客户端使用获取的访问令牌访问存放在服务提供方上的受保护的资源</li>
</ol>

<h6 id="section-3">方法</h6>

<p>前期比较了两种方案，决定优先使用网路爬虫的方案。</p>

<p>在使用爬虫的方案时，尽管在使用cookie模拟登陆renren.com，douban.com可以成功，但还是在weibo.com这遇到了另外一个头痛加密数据的问题，之前的工作没有办法得到应用。而且短时间内数据加密的方式解决不了。放弃。</p>

<p>使用OAuth认证调用微博API的方案可以很方便的通过认证并且得到带有地理位置标签的数据。目前获得了35000条微博的数据。</p>

<p>对其返回的数据分析发现，该数据结构足以满足需求，用户id，发布微博时间，发布地点，微博文本内容等。</p>

<p>这些数据的来源是源自微博中周边微博这类地理位置的API。出于实验的目的，我把海淀区划分了15个区域，取区域内的标志性地点的经纬度（可以随时增加其他点），再以一个较低的频率（为了尽量避免取到重复数据）去取这15个点的周边微博（全部含有地理标签）。</p>

<p>对于这些数据的想法，目前是把这些数据标示在地图上，先得到直观上的点的分布，再分析为什么会再此聚集，和什么属性相关。这是基本的想法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python处理带有时区的的字符串]]></title>
    <link href="http://aluenkinglee.com/blog/2013/04/16/pythonchu-li-dai-you-shi-qu-de-de-zi-fu-chuan/"/>
    <updated>2013-04-16T15:54:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/04/16/pythonchu-li-dai-you-shi-qu-de-de-zi-fu-chuan</id>
    <content type="html"><![CDATA[<p>最近在处理一些微博的数据，其中从服务器返回来的json串最后转换成了python中的字典，
只是可惜时间也被变成了字符串格式，好在python文档足够全且简单，可以使用datetime
中的strptime来解决，尽管如此还是在时区那卡了会</p>

<p>微博返回的时间数据格式如下：</p>

<h5 id="fri-aug-12-140931-0800-2011">“Fri Aug 12 14:09:31 +0800 2011″</h5>

<p>然后我这样处理的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">time.strptime('Fri Aug 12 14:09:31 +0800 2011', '%a %b %d %H:%M:%S %z %Y')</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->
<p>当然也可以这样，只是试验下而已</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">dt2 = datetime.strptime('Fri Aug 12 14:09:31 +0800 2011', '%a %b %d %H:%M:%S %Z %Y')</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然而却出现了如下的错误：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ValueError: time data 'Fri Aug 12 14:09:31 +0800 2011' does not match format '%a %b %d %H:%M:%S %Z %Y'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查了下<a href="http://stackoverflow.com/questions/10540399/strftime-does-not-return-abbreviated-time-zone">资料</a>
发现这个跟系统有关系，而且这个是bug，（虽然开发者不承认，但是我觉得还有有点关系….虽然它又跟locals有关系。。。识别起来
确实很繁琐）比如现在我是在windows上处理的结果就是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; print time.strftime("%a, %d %b %Y %I:%M:%S %p %Z", time.localtime(10.5))
</span><span class="line">Thu, 01 Jan 1970 08:00:10 AM 中国标准时间
</span><span class="line">&gt;&gt;&gt; print time.strftime("%a, %d %b %Y %I:%M %p %Z", time.gmtime())
</span><span class="line">Tue, 16 Apr 2013 08:33 AM 中国标准时间
</span><span class="line">&gt;&gt;&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>和那个+8000格格不入，好吧 反正数据的处理设计不到时区，那么可以这样子做</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; dt2 = datetime.strptime('Fri Aug 12 14:09:31 +0800 2011', '%a %b %d %H:%M:%S +0800 %Y')
</span><span class="line">&gt;&gt;&gt; print dt2
</span><span class="line">2011-08-12 14:09:31</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对现在的需求来说,反而更好.</p>

<h3 id="section">参考</h3>

<ol>
  <li>
    <p><a href="http://bugs.python.org/issue6641">issue6641</a></p>
  </li>
  <li>
    <p><a href="http://stackoverflow.com/questions/4788533/python-strftime-gmtime-not-respecting-timezone">python-strftime-gmtime-not-respecting-timezone</a></p>
  </li>
  <li>
    <p><a href="http://stackoverflow.com/questions/10540399/strftime-does-not-return-abbreviated-time-zone">strftime-does-not-return-abbreviated-time-zone</a></p>
  </li>
  <li>
    <p><a href="http://forum.open.weibo.com/read.php?tid=11780">微博使用</a></p>
  </li>
  <li>
    <p><a href="http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">strftime-and-strptime-behavior</a></p>
  </li>
  <li>
    <p><a href="http://stackoverflow.com/questions/466345/converting-string-into-datetime">converting-string-into-datetime</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中关于变量属性的迷惑]]></title>
    <link href="http://aluenkinglee.com/blog/2013/03/15/puzzles-of-vars-properties-in-python/"/>
    <updated>2013-03-15T17:06:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/03/15/puzzles-of-vars-properties-in-python</id>
    <content type="html"><![CDATA[<p>当初使用C++，java的时候，变量的属性（可访问性，scope这类的意思）如public，private，protected，static这类很好理解。</p>

<p>但是Python中默认的成员函数，成员变量都是公开的(public),而且python中没有类似public,private等关键词来修饰成员函数，成员变量。</p>

<!-- more -->

<p>在python中定义私有变量只需要在变量名或函数名前加上 ”__“两个下划线，那么这个函数或变量就会为私有的了。对static这样的很是好奇。</p>

<p>于是便有了这样子的实验。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">o1</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
</span><span class="line"><span class="n">o2</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">A</span><span class="p">,</span><span class="n">o1</span><span class="p">,</span><span class="n">o2</span>
</span><span class="line"><span class="k">print</span> <span class="n">A</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o1</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o2</span><span class="o">.</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">o1</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class="line"><span class="k">print</span> <span class="n">A</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o1</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o2</span><span class="o">.</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">A</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">print</span> <span class="n">A</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o1</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o2</span><span class="o">.</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">o2</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">print</span> <span class="n">A</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o1</span><span class="o">.</span><span class="n">value</span><span class="p">,</span><span class="n">o2</span><span class="o">.</span><span class="n">value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是我机器上的测试结果，A没有显示地址??怎么回事，两个实例都有自己的地址:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">__main__</span><span class="o">.</span><span class="n">A</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">A</span> <span class="n">instance</span> <span class="n">at</span> <span class="mh">0x01262AD0</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">A</span> <span class="n">instance</span> <span class="n">at</span> <span class="mh">0x013091C0</span><span class="o">&gt;</span>
</span><span class="line"><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">0</span> <span class="mi">10</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">5</span> <span class="mi">10</span> <span class="mi">5</span>
</span><span class="line"><span class="mi">5</span> <span class="mi">10</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前两行的结果都很好理解，但是第三行，之前o2的值一直没有改变，o1的值改变，在A的值改变之后o2也随之改变了，这个时候….看上去，o2还是在引用A的值，但是在o2自己的值改变之后就不在去引用类的值了。</p>

<h5 id="section">由此可见：</h5>

<ul>
  <li>
    <p>由类派生出来的实例在未操作之前，都是简单的引用类的那些值</p>
  </li>
  <li>
    <p>公共属性的值有点类似于大家C++类中的那种静态变量啊</p>
  </li>
  <li>
    <p>只要实例稍作改变，就不会在引用类了。</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中得一些重要的细节]]></title>
    <link href="http://aluenkinglee.com/blog/2013/03/15/some-important-details-in-python-personal/"/>
    <updated>2013-03-15T16:17:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/03/15/some-important-details-in-python-personal</id>
    <content type="html"><![CDATA[<p>字符串可以被下表索引，和C一样，第一个字符同样是0。</p>

<p>Python中并没有单独的字符类型，一个字符就是长度为1的字符串。</p>

<p>和C字符串不同的是，python字符串值不能更改。</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span> <span class="o">=</span> <span class="s">&#39;string&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;d&#39;</span>
</span><span class="line"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;str&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关于unicode的一些说明，encode(),unicode()那些往
<a href="http://docs.python.org/2/tutorial/introduction.html#unicode-strings">这里看</a></p>

<p>python中一些iterable types（具体术语不知道怎么称呼）是分成可以<code>immutable</code>和<code>mutable</code>的：</p>

<h5 id="mutable">可更改的（<code>mutable</code>）:</h5>

<ul>
  <li>
    <p>字典型(dictionary)</p>
  </li>
  <li>
    <p>列表型(list)</p>
  </li>
</ul>

<h5 id="mutable-1">不可更改（mutable）：</h5>

<ul>
  <li>
    <p>元组（tuple)</p>
  </li>
  <li>
    <p>数值型（number）</p>
  </li>
  <li>
    <p>字符串(string)</p>
  </li>
</ul>

<p>所有的切片操作都是返回一个新的包含请求元素的list。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="s">&#39;eggs&#39;</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1234</span><span class="p">]</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="p">[:]</span>
</span><span class="line"><span class="p">[</span><span class="s">&#39;spam&#39;</span><span class="p">,</span> <span class="s">&#39;eggs&#39;</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1234</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>pass语句请看<a href="http://docs.python.org/2/reference/simple_stmts.html#pass">这里</a></p>

<p>函数中的变量，函数中得变量赋值操作都是把值存在<code>本地符号表（local symbol table）</code>中，
变量引用时先查看本地符号表，在然后是<code>全局符号表（global symbol table）</code>，
最后才是<code>内置表（table of built-in names）</code>，全局变量得先申明下，在使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">v</span><span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test_global_vars</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; 测试使用global&quot;&quot;&quot;</span>
</span><span class="line">    <span class="c">#global v += 1 #wrong!!</span>
</span><span class="line">    <span class="k">global</span> <span class="n">v</span>
</span><span class="line">    <span class="n">v</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">print</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>突然想到了python中得变量类型这些东西，以下是实验</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">test_global_vars</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; 测试使用global&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">global</span> <span class="n">v</span>
</span><span class="line">    <span class="n">v</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">print</span> <span class="n">v</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;测试实参是怎么回事，by value，value总是个函数引用，不是那个</span>
</span><span class="line"><span class="sd">    对象的值,实参也是跟函数内的变量一样被放入到了本地符号表&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">print</span> <span class="n">n</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">v</span><span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="k">print</span> <span class="n">v</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class="line"><span class="n">test_global_vars</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">v</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class="line"><span class="n">foo</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">v</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class="line"><span class="n">v</span><span class="o">+=</span><span class="mi">1</span>
</span><span class="line"><span class="k">print</span> <span class="n">v</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是我机器上的一次run result</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="mi">1</span> <span class="mh">0x1429168</span>
</span><span class="line"><span class="mi">2</span> <span class="mh">0x142915c</span>
</span><span class="line"><span class="mi">2</span> <span class="mh">0x142915c</span>
</span><span class="line"><span class="mi">3</span> <span class="mh">0x1429150</span>
</span><span class="line"><span class="mi">2</span> <span class="mh">0x142915c</span>
</span><span class="line"><span class="mi">3</span> <span class="mh">0x1429150</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>会发现v的值一样的时候，id值都是一样的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">v</span> <span class="o">=</span> <span class="mi">1</span> 			<span class="c">#将名字 v 与内存中值为1的内存绑定在一起。</span>
</span><span class="line"><span class="n">test_global_vars</span><span class="p">()</span> 	<span class="c">#这句话之后就是把v 和 内存中为2的地址绑定在一起。所以地址会变。</span>
</span><span class="line"><span class="n">foo</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> 			<span class="c">#形参n 和 内存中为 3 的地址绑定在一起。实参v还是绑定在 2 的地址。</span>
</span><span class="line"><span class="n">v</span> <span class="o">+=</span> <span class="mi">1</span> 			<span class="c">#v的值改变为3 所以地址就绑定到了 3 在内存中得地方。所以这个时候会发现和上一句的地址一样。</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很奇特，但是这个样子会有什么好处?</p>

<ul>
  <li>
    <p>首先python支持函数编程，函数式编程在运算的过程中值肯定是不会变得。
想想我们数学中得变量（怎么可能会出现x = x + 1 ！！）数学上讲不通。
这对函数式编程是个利好消息。（但是这很明显不是函数式编程，应该是这
个特性在lamda演算中很有用，待解决）</p>
  </li>
  <li>
    <p>这个…受C、C++的“毒害”深啊，目前还是转不过来,但是在看列表<code>可变</code>之后
，刹那间觉得列表这玩意像指针那种东西啊</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;value&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">}</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="n">dic</span>
</span><span class="line"><span class="k">print</span> <span class="n">dic</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">dic</span><span class="p">)),</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
</span><span class="line"><span class="n">b</span><span class="p">[</span><span class="s">&quot;value&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">print</span> <span class="n">dic</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">dic</span><span class="p">)),</span><span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是你看结果，他们都是绑定到同一块内存的，这种字典的就直接在源地址改了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">{</span><span class="s">&#39;value&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span> <span class="p">{</span><span class="s">&#39;value&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span> <span class="mh">0x1823d20</span> <span class="mh">0x1823d20</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;value&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span> <span class="p">{</span><span class="s">&#39;value&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span> <span class="mh">0x1823d20</span> <span class="mh">0x1823d20</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>python就是这么设计的，至于为什么，不知道(待解决)</p>

<p>在说句题外话，你看django那些代码写的，都是使用的tuple之类的。url(省略号)…为什么会这个样子，来看看实验的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;docstring for A&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="c"># self.x = [] #这个是错误的语法，只能在__init__中定义</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class="line">        <span class="c">#x和self.value有什么区别啊</span>
</span><span class="line">        <span class="c">#x和self.x有什么区别啊</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">arg</span> <span class="o">=</span> <span class="n">arg</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;in __init__&quot;</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;x address :</span><span class="se">\t\t\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;self.x address :</span><span class="se">\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">set_x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;in get_x&quot;</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;x address :</span><span class="se">\t\t\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;self.x address :</span><span class="se">\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_xx</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="c">#很诡异的存在啊，但这个只是定义的不同啊</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;in get_xx&quot;</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;x address :</span><span class="se">\t\t\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;self.x address :</span><span class="se">\t\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">x</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">(</span><span class="s">&quot;oj&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">a</span><span class="o">.</span><span class="n">set_x</span><span class="p">()</span>
</span><span class="line">    <span class="c">#print A.__dict__</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span><span class="o">.</span><span class="n">get_value</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span><span class="o">.</span><span class="n">get_xx</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span><span class="o">.</span><span class="n">get_x</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>自己跑下试试，在__init__()内外定义的变量是不一样的，x，self.value类似static，全局共享。而self.x就不是了，在编码的时候一定要注意这种细节。</p>

<p>可能上面那个太复杂了些，那么看看这个。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">b</span><span class="p">:</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="o">=</span><span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">x</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">()</span>
</span><span class="line">    <span class="n">a</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="n">a</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span><span class="n">b</span><span class="o">.</span><span class="n">__dict__</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来还是关于函数的:</p>

<p>The default values are evaluated at the point of function definition in the defining scope, so that</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">arg</span><span class="o">=</span><span class="n">i</span><span class="p">):</span> <span class="c"># 默认的初始值 只 赋值一次 ，其后初始就不会改变了。</span>
</span><span class="line">    <span class="k">print</span> <span class="n">arg</span>
</span><span class="line"><span class="n">i</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class="line"><span class="n">f</span><span class="p">()</span>           <span class="c"># here will print  5！！ 所以这会为5 只要没传递新的参数</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是当形参是个可变对象 如 :列表，字典或者一些类的实例，这个时候会共享这个可变的对象！！！</p>

<p>虽然元组（Tuples）和列表（list）看起来很相似，但是使用的场景不同的。元组通常是不可变的，
通常包括类型不同的元素，可以通过解包和索引来访问。列表是可变的，通常都是些同一类型的元素迭代访问。</p>

<p>遍历技巧，可能需要下标的时候会用到 <a href="http://docs.python.org/2/tutorial/datastructures.html#looping-techniques">这里</a></p>

<hr />

<p>_xxx      不能用’from module import *’导入</p>

<p><strong>xxx</strong> 系统定义名字</p>

<p>__xxx    类中的私有变量名</p>

<p>以单下划线开头_foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；</p>

<p>以双下划线开头的__foo代表类的私有成员；以双下划线开头和结尾的__foo__代表python里特殊方法专用的标识，如__init__()代表类的构造函数。</p>

<p>“单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量；</p>

<p>“双下划线” 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。</p>

<h6 id="python">Python中的继承：</h6>

<p>super可以避免显示的引用Base，这听起来很不错，最起码不用自己去判断使用哪个类的构造方法。
但是最最要的用途还是多继承问题。在python2.7中，得这样解决：super(thisClass,self).<strong>init</strong>() ,python3中变成了这样：super().<strong>init</strong>()</p>

<p>样例：仔细观察，不要忘记那个object！！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">		<span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">		<span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Circle</span><span class="p">(</span><span class="n">Point</span><span class="p">):</span>
</span><span class="line">	<span class="sd">&quot;&quot;&quot;docstring for Circle&quot;&quot;&quot;</span>
</span><span class="line">	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">		<span class="nb">super</span><span class="p">(</span><span class="n">Circle</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">		<span class="c"># Point.__init__(self,x,y)</span>
</span><span class="line">		<span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span><span class="p">;</span>
</span><span class="line"><span class="n">c</span><span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;Base created&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ChildA</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">Base</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ChildB</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">ChildB</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">ChildA</span><span class="p">(),</span><span class="n">ChildB</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git的安装和使用]]></title>
    <link href="http://aluenkinglee.com/blog/2011/03/14/gitde-an-zhuang-he-shi-yong/"/>
    <updated>2011-03-14T15:11:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2011/03/14/gitde-an-zhuang-he-shi-yong</id>
    <content type="html"><![CDATA[<p>git之前一直使用的，但是n久没用居然忘记怎么使用了。。。中途使用过程中居然还出现了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span><span class="line">fatal: The remote end hung up unexpectedly
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->

<p>的错误，真是忘记怎么使用了，连SSH keys都没添加就想push啊…好吧，
真的是好记性不如烂笔头，老老实实的写下来已免在出这样的糗事</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get install git git-core
</span><span class="line">ssh-keygen
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.publickey</p>

<p>接着拷贝.ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。</p>

<h6 id="githubssh-key">打开github帐号管理中的添加SSH key界面的步骤如下</h6>

<ul>
  <li>
    <p>登录github</p>
  </li>
  <li>
    <p>点击右上方的Accounting settings图标</p>
  </li>
  <li>
    <p>选择 SSH key</p>
  </li>
  <li>
    <p>点击 Add SSH key</p>
  </li>
</ul>

<p>在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，
在点击“add key”按钮就可以了。添加过程github会提示你输入一次你的github密码。</p>

<h3 id="git-">git 配置</h3>

<p>git有三个配置文件，分别是<code>repo/.git/config</code>,<code>$HOME/.gitconfig</code>,<code>/etc/gitconfig</code>.</p>

<ol>
  <li>
    <p>repo/.git/config 库级别的配置文件，只对当前库有效，优先级最高(git config –local)</p>
  </li>
  <li>
    <p>$HOME/.gitconfig 用户级别的配置文件，对当前用户有效，优先级次之(git config –global)</p>
  </li>
  <li>
    <p>/etc/gitconfig 系统全局配置文件，对整个系统有效，优先级最低(git config –system)</p>
  </li>
</ol>

<p>git config –list 可以查看当前的git配置列表</p>

<p>如果已经配置了，则会看到user.name 和 user.email的配置信息</p>

<p>如果没有,一般情况下在git提交时会使用机器名，诸如：unknown dev@xxx-PC.(none) 等类型的Author信息，肯定不方便了。</p>

<p>建议都配置明确的user.name 和 user.email信息。</p>

<h5 id="section">可以通过下面的命令进行配置</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git config user.name xxx
</span><span class="line">git config user.email xxx@xxx.com
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置完成后可以通过 git config –list 查看到.</p>

<p>这个准备工作算是完成了，其他的，就参考别人写得。在这不再写了。</p>

<blockquote>
  <blockquote>
    <p>参考</p>
  </blockquote>
</blockquote>

<ol>
  <li>
    <p><a href="http://blog.sina.com.cn/s/blog_55465b470100s63h.html">说明很详细</a></p>
  </li>
  <li>
    <p><a href="http://simen-net.iteye.com/blog/832391">这个有可能会用的着以后，搭建git server，在eclipse里集成git</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/Jerry-Chou/archive/2012/05/14/2499088.html">git常用命令</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
