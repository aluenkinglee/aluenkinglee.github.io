<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | 曾经渐行远，未免心戚戚]]></title>
  <link href="http://aluenkinglee.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://aluenkinglee.com/"/>
  <updated>2014-03-14T17:09:49+08:00</updated>
  <id>http://aluenkinglee.com/</id>
  <author>
    <name><![CDATA[Aluen King Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[“奇异”的内存覆盖]]></title>
    <link href="http://aluenkinglee.com/blog/2014/03/04/qi-yi-de-nei-cun-fu-gai/"/>
    <updated>2014-03-04T22:01:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/03/04/qi-yi-de-nei-cun-fu-gai</id>
    <content type="html"><![CDATA[<p>犯了一个愚蠢的问题，让我碰到了这么个内容错误的bug</p>

<!--more-->

<p><code>bash
*** glibc detected *** ./main: free(): invalid next size (fast): 0x0000000001dd8590 ***
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(+0x76d76)[0x7fd77419fd76]
/lib/x86_64-linux-gnu/libc.so.6(cfree+0x6c)[0x7fd7741a4aac]
/usr/lib/x86_64-linux-gnu/libpcap.so.0.8(+0x1b470)[0x7fd774e2e470]
/usr/lib/x86_64-linux-gnu/libpcap.so.0.8(pcap_loop+0x2f)[0x7fd774e1fecf]
./main[0x401869]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7fd774147ead]
./main[0x401001]
======= Memory map: ========
00400000-00402000 r-xp 00000000 08:08 1982169                            /home/kinglee/github/stuff/cplusplus/traffic_parser/main
00602000-00603000 rw-p 00002000 08:08 1982169                            /home/kinglee/github/stuff/cplusplus/traffic_parser/main
01dc8000-01de9000 rw-p 00000000 00:00 0                                  [heap]
7fd770000000-7fd770021000 rw-p 00000000 00:00 0 
7fd770021000-7fd774000000 ---p 00000000 00:00 0 
7fd774129000-7fd7742a9000 r-xp 00000000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
7fd7742a9000-7fd7744a9000 ---p 00180000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
7fd7744a9000-7fd7744ad000 r--p 00180000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
7fd7744ad000-7fd7744ae000 rw-p 00184000 08:08 2097171                    /lib/x86_64-linux-gnu/libc-2.13.so
7fd7744ae000-7fd7744b3000 rw-p 00000000 00:00 0 
7fd7744b3000-7fd7744c8000 r-xp 00000000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
7fd7744c8000-7fd7746c8000 ---p 00015000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
7fd7746c8000-7fd7746c9000 rw-p 00015000 08:08 2097156                    /lib/x86_64-linux-gnu/libgcc_s.so.1
7fd7746c9000-7fd77474a000 r-xp 00000000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
7fd77474a000-7fd774949000 ---p 00081000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
7fd774949000-7fd77494a000 r--p 00080000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
7fd77494a000-7fd77494b000 rw-p 00081000 08:08 2097168                    /lib/x86_64-linux-gnu/libm-2.13.so
7fd77494b000-7fd774a33000 r-xp 00000000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
7fd774a33000-7fd774c33000 ---p 000e8000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
7fd774c33000-7fd774c3b000 r--p 000e8000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
7fd774c3b000-7fd774c3d000 rw-p 000f0000 08:08 1314662                    /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.17
7fd774c3d000-7fd774c52000 rw-p 00000000 00:00 0 
7fd774c52000-7fd774c72000 r-xp 00000000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
7fd774e0e000-7fd774e13000 rw-p 00000000 00:00 0 
7fd774e13000-7fd774e4b000 r-xp 00000000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
7fd774e4b000-7fd774e4d000 r--p 00037000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
7fd774e4d000-7fd774e4e000 rw-p 00039000 08:08 1331924                    /usr/lib/x86_64-linux-gnu/libpcap.so.1.3.0
7fd774e4e000-7fd774e4f000 rw-p 00000000 00:00 0 
7fd774e6d000-7fd774e71000 rw-p 00000000 00:00 0 
7fd774e71000-7fd774e72000 r--p 0001f000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
7fd774e72000-7fd774e73000 rw-p 00020000 08:08 2097174                    /lib/x86_64-linux-gnu/ld-2.13.so
7fd774e73000-7fd774e74000 rw-p 00000000 00:00 0 
7fff1591a000-7fff1593b000 rw-p 00000000 00:00 0                          [stack]
7fff159ff000-7fff15a00000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
已放弃
</code> </p>

<p>对于这个问题，当时表示怎么会出现内存错误？我指针根本没有指错啊！那块内存也没有回收阿！！原来的程序比较大，所以我就抽象写了个简单的，慢慢找。</p>

<p>```c++
#include <string>
#include <iostream>
#include <algorithm>
#include <vector /></algorithm></iostream></string></p>

<p>using namespace std;
typedef class packet
{
    private:
    int len;
    char* data;
    public:
    packet(int l,char * p)
    {
	//注意这里，开始我写成了这样，一开始写顺了…
	//我本意是想申请一个长度为l的连续内存区域。
	//结果本意成为了申请了一个单位的内存，并给它赋值！！
        data=new char(l);
        //应该写成这样
        //data=new char[l];
        copy(p,p+l,data);
        len = l;
    }</p>

<pre><code>packet(const packet&amp; p)  
{
    this-&gt;len=p.len;
    data=new char[len];
    copy(p.data, p.data+len,data);
}

packet&amp; operator=(const packet&amp; p)
{
    this-&gt;len = p.len;
    this-&gt;data = new char[this-&gt;len];
    copy(p.data, p.data+len,this-&gt;data);
    return *this;
} 

~packet(){delete[] data;}
char* get_data(){return data;}
</code></pre>

<p>}packet;</p>

<p>int main()
{
    vector<packet> stream;
    char *t = "hello world.\n";
    packet p(5,t);
    cout &lt;&lt; p.get_data( )&lt;&lt; endl;
    stream.push_back(p);
    cout &lt;&lt; stream[0].get_data() &lt;&lt;endl;
    return 0;
}
```</packet></p>

<p>编译运行就会出错。</p>

<p><code>
g++ test.cc -o main 
</code></p>

<p>所以，上述的语句是没有申请够足够的内存(只申请了一个，却按照那个长度来copy！！当然会出现数据覆盖的错误，这个属于语言错误)，所以会造成之后的内存覆盖，导致出错。有意思的是在windows平台上，我试过，是不会提示你出错的。
不过确实可以看到运行过程中不合理的地方。比如数据被覆盖了overlapping!（实验平台debian 7 ，g++ (Debian 4.7.2-5) 4.7.2
windows是win7 + mingw）</p>

<p><code>
*** glibc detected *** ./main: double free or corruption (fasttop): 0x0000000000e55010 ***
</code></p>

<p>另外一点，在实际使用过程中，还是尽量不要混合使用malloc 和delete/delete[]</p>

<ul>
  <li>
    <p>使用malloc分配的内存尽量使用free释放掉</p>
  </li>
  <li>
    <p>使用new分配的内存，看情况，若是对象类型本身就是数组类型，使用delete[],否则使用delete释放掉内存</p>
  </li>
  <li>
    <p>使用new[]分配内存的，必须使用delete[] 来释放掉内存。否则只是释放掉了内存区域的第一个从而造成内存泄漏。</p>
  </li>
</ul>

<blockquote>
  <blockquote>
    <p>参考</p>
  </blockquote>
</blockquote>

<ul>
  <li>
    <p><a href="http://stackoverflow.com/questions/18389313/glibc-detected-main-free-invalid-next-size-fast">’** glibc detected *** ./main: free(): invalid next size (fast):’</a></p>
  </li>
  <li>
    <p><a href="http://www.cplusplus.com/reference/cstring/memcpy/?kw=memcpy">‘好好使用memcpy’</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning :linear regression]]></title>
    <link href="http://aluenkinglee.com/blog/2014/01/05/machine-learning-linear-regression/"/>
    <updated>2014-01-05T12:00:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2014/01/05/machine-learning-linear-regression</id>
    <content type="html"><![CDATA[<p>机器学习中，总体来说是分为两类问题：</p>

<p>1.有监督的学习方法
2.无监督的学习方法</p>

<p>其他是这两者的综合，比如说半监督学习方法，强化学习（这个还未接触过）。</p>

<p>本文呢，先从有监督的学习方法开始讲起，主要是记载学习过程中个人认为最重要的地方。</p>

<p>对于监督学习中的两类问题，或者说三类吧，分别是：回归问题，分类问题和标注问题（tagging）。后面这个很有意思，不过在这里现说一下回归和分类的区别，假如我们要
做一个连续变量的预测，比如说房价的预测，或者明日气温的预测，都是属于回归问题；而对于离散变量的预测，比如判断一个病人是否得了癌症，良性还是恶心，则是一个明显的分
类问题。</p>

<p>接下来的文章，大概是对Andrew Ng视频的一个简单的总结，会结合变成实例（octave和C++）来插叙。
<!--more--></p>

<h3 id="section">线性回归</h3>

<p>好吧，先从一个简单的例子讲起，假设我们要为一个房子售价做个数学模型，价格和什么有关系？当然因素很多，比如房间的大小，离商业区的距离，嗯，房子几坪，奥，看起来不是
个简单事儿～，那好吧，遵循我们先从最简单做起的原则，现假设相同尺寸的房子价格和城市人口多少有关系，其他的先抛到一边去，我喜欢做甩手掌柜==
，你看这很合理！北京上海的房子价格能和三四线城市的比么=。=</p>

<p>那么好，我们会看到下面这个图！图先不上！！！假设你装了octave，并执行ex1的话就会看到它的！！</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f1.png?raw=true" alt="价格-人口关系图" title="价格-人口关系图" /></p>

<p>在那之前，先让我们约定几个问题，恩恩：</p>

<h5 id="section-1">注释</h5>
<ul>
  <li>$m$ ：是训练实例的个数</li>
  <li>$x$ ：是输入的特征向量,很有可能是这样子：$x=(x_1,…,x_k)$</li>
  <li>$y$ ：是输出结果</li>
  <li>$(x,y)$ ：是一个训练实例</li>
  <li>$(x^{(i)},y^{(i)})$ ：表示第i个训练样例</li>
</ul>

<p>好了，让我们接着开始吧。那我们应该如何表示我们的假设（hypothesis）呢？既然只有一个变量，这样表示好了：</p>

<script type="math/tex; mode=display">
h_\theta(x) = \theta_0 + \theta_1x_1 ， \Theta={ (\theta_0,\theta_1) }
</script>

<p>那应该如何选择参数$\theta$呢？机器学习不就是干这活的么=。=</p>

<p>直观的感受就是：“嘿，干嘛不用LMS最小二乘法？无脑流，简单又实惠！统计课上的入门案例。。”就他了。。。</p>

<p>所以，总结如下：</p>

<p>假设：</p>

<script type="math/tex; mode=display">
h_\theta(x) = \theta_0 x_0 + \theta_1 x_1 ， 
\Theta = \left( \begin{array}{c}
        \theta_0 \\
        \theta_1
        \end{array} \right), 
x = (x_0,x_1),
x_0 \equiv 1 \\
h_\theta(x) = x \cdot \Theta
</script>

<p>费用函数：</p>

<script type="math/tex; mode=display">
J{(\Theta)}=\frac{1}{2m} \sum\limits_{i=1}^m \left(h_\theta(x^{(i)})-y^{(i)}
\right)^2 
</script>

<p>目标：</p>

<script type="math/tex; mode=display">
\min\limits_{\Theta} J{(\Theta)}
</script>

<p>回想下我们学过的数学知识吧，给定一个函数，求函数的最值，导数？梯度？那一套东西想起来了吧，OK。那好办了。要是还不是很清楚，那看一下<a href="http://zh
.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6">梯度</a>以及<a href="http://zh.wikipedia.org/wiki/%
E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95">梯度下降法</a>在此就不罗嗦了。Andrew
Ng在视频中讲的很形象，只要我们沿着山最陡的方向向下走，就会有可能找到最小值，翻译成数学语言就是沿着梯度相反的方向$- \nabla F(x)$,
就可以下降最快。（我们不是要找最小值么，当然是水往低处流！所以就是负值了）</p>

<h4 id="section-2">梯度下降法</h4>

<p>选定了回归模型，那就要确定参数$\Theta$了，$\Theta$只有在$J{(\Theta)}
$最小的情况下才能确定，所以问题归结为了求极小值的问题，梯度下降法是个不错的选择。当然，它会遇到找到的值只是个局部最小值。</p>

<p>这是示意图：</p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f4.png?raw=true" alt="最小值" /></p>

<p><img src="https://github.com/aluenkinglee/aluenkinglee.github.io/blob/source/source/images/2014-01-05-machine-learning-linear-regression/linear_regression_f5.png?raw=true" alt="局部极小值" /></p>

<p>流程如下：</p>

<ol>
  <li>对$\Theta$赋予初始值，可随机，可为零向量。</li>
  <li>同步改变$\Theta$值，使得$J{(\Theta)}$沿着梯度下降的方向走，直到学习曲线平滑，也就是收敛。</li>
</ol>

<p>用公式来描述就是,对于$j=1$和$j=0$，同时重复以下操作，直到$J{(\Theta)}$收敛。</p>

<script type="math/tex; mode=display">
\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}
J{(\theta_0,\theta_1) } \\
\theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^m 
\left(h_\theta(x^{(i)})-y^{(i)}
\right) \cdot x_j^{(i)}
</script>

<p>这是octave实现，向量形式,代码<a href="https://github.com/aluenkinglee/mlclass/blob/master/
mlclass-ex1/gradientDescent.m">详见</a></p>

<p>```octave
function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha</p>

<p>% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
for iter = 1:num_iters
    %theta1 = theta(1) - alpha * X(:,1)’ *(X * theta - y) / m;
    %theta2 = theta(2) - alpha * X(:,2)’ *(X * theta - y) / m;
    %theta = [theta1; theta2]
    theta = theta - alpha / m * (X’ * (X * theta - y));
    % Save the cost J in every iteration  <br />
    J_history(iter) = computeCost(X, y, theta);
end
end
```</p>

<p>对应的C++实现，向量形式，代码<a href="https://github.com/aluenkinglee/mlclass/blob/master/mlclass
-ex1/gradientDescent.cpp">详见</a></p>

<p>```cpp
#include “gradientDescent.h”
#include “computeCost.h”
using namespace mlclass::ex1;
namespace mlclass{
namespace ex1{
    //Performs gradient descent to learn theta
    mat gradientDescent(mat X, vec y, mat&amp; theta, double alpah,long num_inters){
        //number of training examples
        long m = y.n_rows;</p>

<pre><code>    mat J_history = zeros&lt;mat&gt;(num_inters,1);
    long i = 0;
    for (;i &lt; num_inters; i++){
        theta = theta - alpah/m* (X.t()* (X*theta - y));
        J_history(i) = computeCost(X, y, theta);    
    }
    return J_history;
} } } ```
</code></pre>

<p><strong>有一个事情需要说明一下</strong></p>

<p>梯度下降发的收敛速度比较慢，相比于直接用公式求解$\theta$来说，尤其是当m较小的时候，比如说$m&lt;10000$,
这个时候用公式求解$\theta$比较快，但是大于这个值之后，计算矩阵的逆是花费较大的，此时使用梯度下降法比较理想，而且可以做到分布式计算值，加快求解速度。</p>

<script type="math/tex; mode=display">
\Theta=(X^TX)^-1X^Ty
</script>

<p>关于线性回归就先到这，接下来会记述关于logistic回归等的文章。</p>

<blockquote>
  <p>reference</p>
</blockquote>

<p>1.<a href="https://class.coursera.org/ml-004/lecture">Machine Learning by Andrew Ng(1-2)</a></p>

<p>2.<a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可爱的Armadillo]]></title>
    <link href="http://aluenkinglee.com/blog/2013/12/31/ke-ai-de-armadillo/"/>
    <updated>2013-12-31T10:25:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/12/31/ke-ai-de-armadillo</id>
    <content type="html"><![CDATA[<p>最近又重新看了一下coursera上的<a href="https://class.coursera.org/ml-004/lecture/index">机器学习</a>(Andrew Ng讲的)，比起之前上老师的课和<a href="http://book.douban.com/subject/1102235/" title="机器学习">机器学习</a>这本书来说，简直好太多。当初选修这个课程的时候明显感到编程实践环节太少，很不适应，只有一个大作业而已。好在这里的Quara和Programming Excises很给力。</p>

<p>我的设想是这样，octave作为一种快速验证想法的工具不适合应用在实际的生产环境中的，毕竟计算速度还是可以依靠集群和并行化来加快大数据处理。在此参考了C++的<a href="http://en.wikipedia.org/wiki/Comparison_of_linear_algebra_libraries">线性代数库</a>之后选择了Armadillo,毕竟经常更新并且从官网资料来看，和octave代码相似便于移植，再说，从它本身和其他的对比来看，速度也是相当快的。</p>

<p>不过，在安装完Armadillo之后，编译example目录下的例子并不通过，提示</p>

<!--more-->

<p><code>
/tmp/cc9ckDKG.o: In function `void arma::gemv&lt;false, false, false&gt;::apply_blas_type&lt;double&gt;(double*, arma::Mat&lt;double&gt; const&amp;, double const*, double, double)':
example1.cpp:(.text._ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdEEvPT_RKNS_3MatIS3_EEPKS3_S3_S3_[_ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdEEvPT_RKNS_3MatIS3_EEPKS3_S3_S3_]+0x7a): undefined reference to `wrapper_dgemv_'
/tmp/cc9ckDKG.o: In function `main':
example1.cpp:(.text.startup+0x1a5d): undefined reference to `wrapper_ddot_'
collect2: error: ld returned 1 exit status
</code></p>

<p>然后看了readme里面的编译链接部分，发现即使尝试</p>

<p><code>
g++ example1.cpp -o example1 -O2 -llapack -lblas
</code></p>

<p>也是不行。所以不甘心的看了<code>/usr/include/armadillo_bits/config.hpp</code>，找到了<code>#define ARMA_USE_WRAPPER</code>,并把它注释掉,就像这样</p>

<p><code>
//// #define ARMA_USE_WRAPPER
//// Comment out the above line if you're getting linking errors when compiling your programs,
//// or if you prefer to directly link with LAPACK and/or BLAS.
//// You will then need to link your programs directly with -llapack -lblas instead of -larmadillo
</code></p>

<p>在用上面的命令就可以了。</p>

<p>至于怎么安装，还是请看Readme吧各位。希望这个帖子能帮助有类似问题的人。（在debain系列的linux上有可能会有这样的问题。）</p>

<p>接下来，应该就会把之前看过的视频和资料的东西在整理一下，并借用这个库实现应该实现的部分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++前置声明和复制控制]]></title>
    <link href="http://aluenkinglee.com/blog/2013/10/24/c-plus-plus-forward-declaration-and-copy-control/"/>
    <updated>2013-10-24T05:33:00+08:00</updated>
    <id>http://aluenkinglee.com/blog/2013/10/24/c-plus-plus-forward-declaration-and-copy-control</id>
    <content type="html"><![CDATA[<p>突然有兴致想起了看会C++，因为最近一直是python，java，python的节奏…在这样下去，C++水平恐怕就停留在了只会编算法的地儿了…</p>

<p>随手一翻，看到了复制控制。对于这章，印象里的记忆是：
» 如果一个类它有形如指针或者申请了其他的系统资源成员，这个时候就得注意了，如申请资源，如何释放资源，复制的时候应该注意这些成员的行为是怎么样的。</p>

<p>然后，就不是很清楚了。大概看了看 其实也差不多…好吧是差很多。编程的过程中出现了一些问题。在这里记录下来&gt;.&lt; 真实忘不了了！</p>

<h5 id="section">复制构造函数</h5>
<p>它是一个特殊的构造函数，而且形参常用const Type&amp; 来修饰(如果凶残点，用指针也不是不行，但一定得是这两种！想想是为什么？)</p>

<!--more-->
<p>有两种情况会调用它：</p>

<ol>
  <li>定义一个新对象，并用一个同类型的对象对它初始化，就像这样 <code>string fileDesp(filename);</code>此处的filename是已经定义好的对象。’显示调用’</li>
  <li>复制一个对象，并把它作为实参传给一个函数。’隐式调用’</li>
  <li>从函数返回时复制一个对象。’隐式调用’</li>
  <li>初始化顺序容器中的元素。’隐式调用’</li>
  <li>根据元素初始化列表初始化数组元素。’隐式调用’</li>
</ol>

<p><code>
string book = "ISBN-2323-23234";
</code></p>

<p>创建book对象时，编译器首先会接受一个C语言风格形参的string构造函数，创建一个临时对象，然后调用string的复制构造函数将book初始化那个临时对象的副本。（但是我感觉更像是’临时对象-&gt;赋值操作’..这里需要编码测试一下）</p>

<p>和java，python创建对象的方法来比,C++方法真心多…</p>

<h5 id="section-1">合成的复制构造函数</h5>
<p>就是自个没写编译器默认提供的复制构造函数，完成的功能很简单，数据成员逐个初始化，（<code>static</code>成员例外！！因为他们是属于类的！！）</p>

<h5 id="explicit">关于explicit的复制构造函数</h5>
<p>(以后加上，真心没写过，只知道IO类型的复制构造函数都是explicit的)</p>

<h5 id="section-2">赋值重载</h5>
<p>=是个二元运算符，所以有两个形参，分别对应左操作数和右操作数(const引用),当为成员函数时就是左操作数默认绑定到this指针上了。返回值为同一类型的引用。</p>

<h5 id="section-3">关于析构函数</h5>
<p>析构函数就是用来回收那些申请的系统资源的。所以自个度量何时该自己写给类的析构函数吧。</p>

<h5 id="section-4">关于何时调用析构函数</h5>
<ol>
  <li>撤销类的对象自动调用</li>
  <li>动态分配的对象只有在删除指向该指针时，才会运行析构函数！！否则会导致内存泄漏，小心啦。</li>
</ol>

<p><code>
string filename * p = new string();
delete p;
</code>
上述删除的行为不会销毁属于类的成员对象——static成员！其实挺好理解的啊。</p>

<p>下面是个例子。现在先在这里贴下代码，以后放到github里面去。</p>

<p>```</p>

<h1 id="include-iostream">include <iostream /></h1>
<p>#include <set /></p>

<p>using std::string;
using std::set;
using std::cout;
using std::endl;
//predeclaration of Message
class Message;</p>

<p>class Folder
{
public:
    Folder(){
    	cout « “Folder” «endl;
    }
    Folder(const Folder&amp;);
    Folder&amp; operator=(const Folder &amp;);
    ~Folder();</p>

<pre><code>void save(Message&amp;);
void remove(Message&amp;);
void addMsg(Message*);
void remMsg(Message*);
</code></pre>

<p>private:
    set&lt;Message*&gt; messages;</p>

<pre><code>void put_Folder_in_Message(const set&lt;Message*&gt;&amp;);
void remove_Folder_from_Message();
</code></pre>

<p>};</p>

<p>class Message
{
public:
    Message(const string &amp; str=””):
        contents(str)
        {}
    Message(const Message&amp;);
    Message&amp; operator=(const Message &amp;);
    ~Message();</p>

<pre><code>void save(Folder&amp;);
void remove(Folder&amp;);
void addFldr(Folder*);
void remFldr(Folder*);
</code></pre>

<p>private:
    string contents;
    set&lt;Folder*&gt; folders;</p>

<pre><code>void put_Msg_in_Folders(const set&lt;Folder*&gt;&amp;);
void remove_Msg_from_Folders(); };
</code></pre>

<p>Folder::Folder(const Folder&amp; f):
    messages(f.messages)
{
    put_Folder_in_Message(messages);
}</p>

<p>void Folder::put_Folder_in_Message(const set&lt;Message<em>&gt; &amp; msg)
{
    for (set&lt;Message</em>&gt;::const_iterator beg = msg.begin();
            beg != msg.end();
            ++beg)
    {
        (*beg)-&gt;addFldr(this);
    }
}</p>

<p>Folder&amp; Folder::operator=(const Folder &amp; f)
{
    if (&amp;f != this)
    {
        //先把自己的给清除掉，在加上要赋值的，要不然肯定不一样。。
        //因为Messages不一样。。
        remove_Folder_from_Message();
        messages = f.messages;
        put_Folder_in_Message(messages);
    }
    return *this;
}</p>

<p>void Folder::remove_Folder_from_Message()
{
    for(set&lt;Message<em>&gt;::const_iterator beg = this-&gt;messages.begin();
            beg != messages.end();
            ++beg)
    {
        (</em>beg)-&gt;remFldr(this);
    }
}</p>

<p>Folder::~Folder()
{
    remove_Folder_from_Message();
}</p>

<p>void Folder::save(Message &amp; msg)
{
    addMsg(&amp;msg);
    msg.addFldr(this);
}</p>

<p>void Folder::remove(Message&amp; msg)
{
    remMsg(&amp;msg);
    msg.remFldr(this);
}</p>

<p>void Folder::addMsg(Message* msg)
{
    messages.insert(msg);
}</p>

<p>void Folder::remMsg(Message* msg)
{
    messages.erase(msg);
}</p>

<p>//copy construction ,put the new message into the folders where the msg is pointed.
inline Message::Message(const Message&amp; m):
    contents(m.contents), folders(m.folders)
{
    put_Msg_in_Folders(folders);
}</p>

<p>void Message::put_Msg_in_Folders(const set&lt;Folder<em>&gt; &amp;folders)
{
    for(set&lt;Folder</em>&gt;::const_iterator beg = folders.begin();
            beg != folders.end();
            ++ beg)
    {
        //beg is a pointer to Folder*
        (*beg)-&gt;addMsg(this);
    }
}</p>

<p>inline Message&amp; Message::operator=(const Message&amp; msg)
{
    if(&amp;msg != this) {
        //首先把自己指向的那些folder都给取消掉
        remove_Msg_from_Folders();
        //消息的内容copy过来
        contents = msg.contents;
        folders = msg.folders;
        put_Msg_in_Folders(folders);
    }
    return *this;
}</p>

<p>void Message::remove_Msg_from_Folders()
{
    for(set&lt;Folder<em>&gt;::const_iterator beg = folders.begin();
            beg != folders.end();
            ++beg)
    {
        (</em>beg)-&gt;remMsg(this);
    }
}</p>

<p>inline Message::~Message()
{
    remove_Msg_from_Folders();
}</p>

<p>void Message::save(Folder&amp; folder)
{
    addFldr(&amp;folder);
    folder.addMsg(this);
}</p>

<p>void Message::addFldr(Folder* pfolder)
{
    folders.insert(pfolder);
}</p>

<p>void Message::remove(Folder&amp; folder)
{
    remFldr(&amp;folder);
    folder.remMsg(this);
}</p>

<p>void Message::remFldr(Folder* pfolder)
{
    folders.erase(pfolder);
}</p>

<p>int main()
{
	Message m(“dsfasdf”);
	Folder f = Folder();
	cout « “asdf”« endl;
	return 0;
}</p>

<p>```</p>

<p>可以运行，但是不是想要的。</p>

<p>正确的应该分开写</p>

<p><code>Folder.h</code></p>

<p>```
#include <iostream>
#include <set /></iostream></p>

<h1 id="ifndef-folder">ifndef <strong>Folder</strong></h1>
<p>#define <strong>Folder</strong></p>

<p>using std::string;
using std::set;</p>

<h1 id="include-messageh">include “Message.h”</h1>
<p>//predeclaration of Message
class Message;
// Message is a incomplete type.It can be used in limited ways only.
// 1.can not define object of this type.
// 2.only used as a pointer or ref.
// 3.declare it as the formal parameter of a function or return type of a function.
class Folder
{
public:
    Folder(){}
    Folder(const Folder&amp;);
    Folder&amp; operator=(const Folder&amp;);
    ~Folder();</p>

<pre><code>// Message is used as the formal parameter.
void save(Message&amp;);
void remove(Message&amp;);
void addMsg(Message*);
void remMsg(Message*);
</code></pre>

<p>private:
    // Message is used as the typename of the template.
    set&lt;Message*&gt; messages;</p>

<pre><code>void put_Folder_in_Message(const set&lt;Message*&gt;&amp;);
void remove_Folder_from_Message();
</code></pre>

<p>};</p>

<h1 id="endif">endif</h1>
<p>```</p>

<p><code>Message.h</code></p>

<p>```
#include <iostream>
#include <set /></iostream></p>

<h1 id="ifndef-message">ifndef <strong>Message</strong></h1>
<p>#define <strong>Message</strong></p>

<p>using std::string;
using std::set;</p>

<h1 id="include-folderh">include “Folder.h”</h1>
<p>//predeclaration of Folder
class Folder;
// Folder is a incomplete type.It only can be used in limited ways.
// 1.can not define object of this type.
// 2.only used as a pointer or ref.
// 3.declare it as the formal parameter of a function or return type of a function.</p>

<p>class Message
{
public:
    Message(const string &amp; str=””):
        contents(str) {}
    Message(const Message&amp;);
    Message&amp; operator=(const Message &amp;);
    ~Message();</p>

<pre><code>// Folder is used as the formal parameter.
void save(Folder&amp;);
void remove(Folder&amp;);
void addFldr(Folder*);
void remFldr(Folder*);
</code></pre>

<p>private:
    string contents;
    set&lt;Folder*&gt; folders;</p>

<pre><code>// Folder is used as the typename of the template.
void put_Msg_in_Folders(const set&lt;Folder*&gt;&amp;);
void remove_Msg_from_Folders(); };
</code></pre>

<h1 id="endif-1">endif</h1>
<p>```</p>
]]></content>
  </entry>
  
</feed>
